"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import sys

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from builtins import (
    bool,
    bytes,
    float,
    int,
    str,
    type,
)
from collections.abc import (
    Iterable,
    Mapping,
)
from common_pb2 import (
    File,
    Request,
    Response,
)
from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)
from google.protobuf.internal.containers import (
    MessageMap,
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
    ScalarMap,
)
from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)
from google.protobuf.message import (
    Message,
)
from typing import (
    NewType,
)

DESCRIPTOR: FileDescriptor

class _OutputFormat:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _OutputFormatEnumTypeWrapper(_EnumTypeWrapper[_OutputFormat.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    SHARED_LIB: _OutputFormat.ValueType  # 0
    SHELLCODE: _OutputFormat.ValueType  # 1
    EXECUTABLE: _OutputFormat.ValueType  # 2
    SERVICE: _OutputFormat.ValueType  # 3
    THIRD_PARTY: _OutputFormat.ValueType  # 4

class OutputFormat(_OutputFormat, metaclass=_OutputFormatEnumTypeWrapper): ...

SHARED_LIB: OutputFormat.ValueType  # 0
SHELLCODE: OutputFormat.ValueType  # 1
EXECUTABLE: OutputFormat.ValueType  # 2
SERVICE: OutputFormat.ValueType  # 3
THIRD_PARTY: OutputFormat.ValueType  # 4

class _StageProtocol:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _StageProtocolEnumTypeWrapper(_EnumTypeWrapper[_StageProtocol.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    TCP: _StageProtocol.ValueType  # 0
    HTTP: _StageProtocol.ValueType  # 1
    HTTPS: _StageProtocol.ValueType  # 2

class StageProtocol(_StageProtocol, metaclass=_StageProtocolEnumTypeWrapper): ...

TCP: StageProtocol.ValueType  # 0
HTTP: StageProtocol.ValueType  # 1
HTTPS: StageProtocol.ValueType  # 2

class _FileType:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _FileTypeEnumTypeWrapper(_EnumTypeWrapper[_FileType.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    NO_FILE: _FileType.ValueType  # 0
    BINARY: _FileType.ValueType  # 1
    TEXT: _FileType.ValueType  # 2

class FileType(_FileType, metaclass=_FileTypeEnumTypeWrapper):
    """[ Loot ] ----------------------------------------"""

NO_FILE: FileType.ValueType  # 0
BINARY: FileType.ValueType  # 1
TEXT: FileType.ValueType  # 2

class _ShellcodeEncoder:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _ShellcodeEncoderEnumTypeWrapper(_EnumTypeWrapper[_ShellcodeEncoder.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    NONE: _ShellcodeEncoder.ValueType  # 0
    SHIKATA_GA_NAI: _ShellcodeEncoder.ValueType  # 1

class ShellcodeEncoder(_ShellcodeEncoder, metaclass=_ShellcodeEncoderEnumTypeWrapper):
    """[ Shellcode ] ----------------------------------------"""

NONE: ShellcodeEncoder.ValueType  # 0
SHIKATA_GA_NAI: ShellcodeEncoder.ValueType  # 1

class _HTTPC2SegmentType:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _HTTPC2SegmentTypeEnumTypeWrapper(_EnumTypeWrapper[_HTTPC2SegmentType.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    POLL: _HTTPC2SegmentType.ValueType  # 0
    SESSION: _HTTPC2SegmentType.ValueType  # 1
    CLOSE: _HTTPC2SegmentType.ValueType  # 2

class HTTPC2SegmentType(_HTTPC2SegmentType, metaclass=_HTTPC2SegmentTypeEnumTypeWrapper): ...

POLL: HTTPC2SegmentType.ValueType  # 0
SESSION: HTTPC2SegmentType.ValueType  # 1
CLOSE: HTTPC2SegmentType.ValueType  # 2

class _HashType:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _HashTypeEnumTypeWrapper(_EnumTypeWrapper[_HashType.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    MD5: _HashType.ValueType  # 0
    """MD5 - zero must come first in an enum"""
    MD4: _HashType.ValueType  # 900
    """MD4"""
    SHA1: _HashType.ValueType  # 100
    """MD5
    SHA1
    """
    SHA2_224: _HashType.ValueType  # 1300
    """SHA2-224"""
    SHA2_256: _HashType.ValueType  # 1400
    """SHA2-256"""
    SHA2_384: _HashType.ValueType  # 10800
    """SHA2-384"""
    SHA2_512: _HashType.ValueType  # 1700
    """SHA2-512"""
    SHA3_224: _HashType.ValueType  # 17300
    """SHA3-224"""
    SHA3_256: _HashType.ValueType  # 17400
    """SHA3-256"""
    SHA3_384: _HashType.ValueType  # 17500
    """SHA3-384"""
    SHA3_512: _HashType.ValueType  # 17600
    """SHA3-512"""
    RIPEMD_160: _HashType.ValueType  # 6000
    """RIPEMD-160"""
    BLAKE2B_256: _HashType.ValueType  # 600
    """BLAKE2b-512"""
    GOST_R_32_11_2012_256: _HashType.ValueType  # 11700
    """GOST R 34.11-2012 (Streebog) 256-bit, big-endian"""
    GOST_R_32_11_2012_512: _HashType.ValueType  # 11800
    """GOST R 34.11-2012 (Streebog) 512-bit, big-endian"""
    GOST_R_34_11_94: _HashType.ValueType  # 6900
    """GOST R 34.11-94"""
    GPG: _HashType.ValueType  # 17010
    """GPG (AES-128/AES-256 (SHA-1($pass)))"""
    HALF_MD5: _HashType.ValueType  # 5100
    """Half MD5"""
    KECCAK_224: _HashType.ValueType  # 17700
    """Keccak-224"""
    KECCAK_256: _HashType.ValueType  # 17800
    """Keccak-256"""
    KECCAK_384: _HashType.ValueType  # 17900
    """Keccak-384"""
    KECCAK_512: _HashType.ValueType  # 18000
    """Keccak-512"""
    WHIRLPOOL: _HashType.ValueType  # 6100
    """Whirlpool"""
    SIPHASH: _HashType.ValueType  # 10100
    """SipHash"""
    MD5_UTF16LE: _HashType.ValueType  # 70
    """md5(utf16le($pass))"""
    SHA1_UTF16LE: _HashType.ValueType  # 170
    """sha1(utf16le($pass))"""
    SHA256_UTF16LE: _HashType.ValueType  # 1470
    """sha256(utf16le($pass))"""
    SHA384_UTF16LE: _HashType.ValueType  # 10870
    """sha384(utf16le($pass))"""
    SHA512_UTF16LE: _HashType.ValueType  # 1770
    """sha512(utf16le($pass))"""
    BLAKE2B_512_PW_SALT: _HashType.ValueType  # 610
    """BLAKE2b-512($pass.$salt)"""
    BLAKE2B_512_SALT_PW: _HashType.ValueType  # 620
    """BLAKE2b-512($salt.$pass)"""
    MD5_PW_SALT: _HashType.ValueType  # 10
    """md5($pass.$salt)"""
    MD5_SALT_PW: _HashType.ValueType  # 20
    """md5($salt.$pass)"""
    MD5_SALT_PW_SALT: _HashType.ValueType  # 3800
    """md5($salt.$pass.$salt)"""
    MD5_SALT_MD5_PW: _HashType.ValueType  # 3710
    """md5($salt.md5($pass))"""
    CRC32: _HashType.ValueType  # 11500
    """... TODO fill in the rest ...

    CRC32
    """
    CRC32C: _HashType.ValueType  # 27900
    """CRC32B"""
    CRC64Jones: _HashType.ValueType  # 28000
    """CRC64-Jones"""
    JAVA_OBJECT: _HashType.ValueType  # 18700
    MURMUR: _HashType.ValueType  # 25700
    """MurmurHash"""
    MURMUR3: _HashType.ValueType  # 27800
    """MurmurHash3"""
    THREE_DES: _HashType.ValueType  # 14100
    """3DES (PT = $salt, key = $pass)"""
    DES: _HashType.ValueType  # 14000
    """DES (PT = $salt, key = $pass)"""
    AES_128_ECB: _HashType.ValueType  # 26401
    """AES-128-ECB NOKDF (PT = $salt, key = $pass)"""
    AES_192_ECB: _HashType.ValueType  # 26402
    """ AES-192-ECB NOKDF (PT = $salt, key = $pass)"""
    AES_256_ECB: _HashType.ValueType  # 26403
    """AES-256-ECB NOKDF (PT = $salt, key = $pass)"""
    CHA_CHA_20: _HashType.ValueType  # 15400
    """ChaCha20"""
    LINUX_KERNEL_CRYPTO_API_24: _HashType.ValueType  # 14500
    """Linux Kernel Crypto API (2.4)"""
    SKIP_32: _HashType.ValueType  # 14900
    """Skip32 (PT = $salt, key = $pass)"""
    PBKDF2_HMAC_MD5: _HashType.ValueType  # 11900
    """PBKDF2-HMAC-MD5"""
    PBKDF2_HMAC_SHA1: _HashType.ValueType  # 12000
    """PBKDF2-HMAC-SHA1"""
    PBKDF2_HMAC_SHA256: _HashType.ValueType  # 10900
    """PBKDF2-HMAC-SHA256"""
    PBKDF2_HMAC_SHA512: _HashType.ValueType  # 12100
    """PBKDF2-HMAC-SHA512"""
    SCRYPT: _HashType.ValueType  # 8900
    """scrypt"""
    PHPASS: _HashType.ValueType  # 400
    """phpass"""
    TACACS_PLUS: _HashType.ValueType  # 16100
    """TACACS+"""
    SIP_DIGEST: _HashType.ValueType  # 11400
    """SIP digest authentication (MD5)"""
    IKE_MD5: _HashType.ValueType  # 5300
    """IKE-PSK MD5"""
    IKE_SHA1: _HashType.ValueType  # 5400
    """IKE-PSK SHA1"""
    SNMP_V3_HMAC_MD5_96: _HashType.ValueType  # 25100
    """SNMPv3 HMAC-MD5-96"""
    SNMP_V3_HMAC_MD5_96__SHA1_96: _HashType.ValueType  # 25000
    """SNMPv3 HMAC-MD5-96 / HMAC-SHA1-96"""
    SNMP_V3_HMAC_SHA1_96: _HashType.ValueType  # 25200
    """SNMPv3 HMAC-SHA1-96"""
    SNMP_V3_HMAC_SHA224_128: _HashType.ValueType  # 26700
    """SNMPv3 HMAC-SHA224-128"""
    SNMP_V3_HMAC_SHA256_192: _HashType.ValueType  # 26800
    """SNMPv3 HMAC-SHA256-192"""
    SNMP_V3_HMAC_SHA384_256: _HashType.ValueType  # 26900
    """SNMPv3 HMAC-SHA384-256"""
    SNMP_V3_HMAC_SHA512_384: _HashType.ValueType  # 27300
    """SNMPv3 HMAC-SHA512-384"""
    WPA_EAPOL_PBKDF2: _HashType.ValueType  # 2500
    """WPA-EAPOL-PBKDF2"""
    WPA_EAPOL_PMK: _HashType.ValueType  # 2501
    """WPA-EAPOL-PMK"""
    WPA_PBKDF2_PMKID_EAPOL: _HashType.ValueType  # 22000
    """WPA-PBKDF2-PMKID+EAPOL"""
    WPA_PMK_PMKID_EAPOL: _HashType.ValueType  # 22001
    """WPA-PMK-PMKID+EAPOL"""
    WPA_PMKID_PBKDF2: _HashType.ValueType  # 16800
    """WPA-PMKID-PBKDF2"""
    WPA_PMKID_PMK: _HashType.ValueType  # 16801
    """WPA-PMKID-PMK"""
    IPMI2_PAKP_HMAC_SHA1: _HashType.ValueType  # 7300
    """IPMI2 RAKP HMAC-SHA1"""
    CRAM_MD5: _HashType.ValueType  # 10200
    """CRAM-MD5"""
    JWT: _HashType.ValueType  # 16500
    """JWT (JSON Web Token)"""
    RADMIN_3: _HashType.ValueType  # 29200
    """Radmin3"""
    KERBEROS_17_TGS_REP: _HashType.ValueType  # 19600
    """Kerberos 5, etype 17, TGS-REP"""
    KERBEROS_17_PREAUTH: _HashType.ValueType  # 19800
    """Kerberos 5, etype 17, Pre-Auth"""
    KERBEROS_17_DB: _HashType.ValueType  # 28800
    """Kerberos 5, etype 17, DB"""
    KERBEROS_18_TGS_REP: _HashType.ValueType  # 19700
    """Kerberos 5, etype 18, TGS-REP"""
    KERBEROS_18_PREAUTH: _HashType.ValueType  # 19900
    """Kerberos 5, etype 18, Pre-Auth"""
    KERBEROS_18_DB: _HashType.ValueType  # 28900
    """Kerberos 5, etype 18, DB"""
    KERBEROS_23_SA_REQ_PREAUTH: _HashType.ValueType  # 7500
    """Kerberos 5, etype 23, AS-REQ Pre-Auth"""
    KERBEROS_23_TGS_REP: _HashType.ValueType  # 13100
    """Kerberos 5, etype 23, TGS-REP"""
    KERBEROS_23_AS_REP: _HashType.ValueType  # 18200
    """Kerberos 5, etype 23, AS-REP"""
    NET_NTLM_V1: _HashType.ValueType  # 5500
    """NetNTLMv1 / NetNTLMv1+ESS"""
    NET_NTLM_V1_NT: _HashType.ValueType  # 27000
    """NetNTLMv1 / NetNTLMv1+ESS (NT)"""
    NET_NTLM_V2: _HashType.ValueType  # 5600
    """NetNTLMv2"""
    NET_NTLM_V2_NT: _HashType.ValueType  # 27100
    """NetNTLMv2 (NT)"""
    FLASK: _HashType.ValueType  # 29100
    """Flask Session Cookie ($salt.$salt.$pass)"""
    ISCSI_CHAP: _HashType.ValueType  # 4800
    """iSCSI CHAP authentication, MD5(CHAP)"""
    RACF: _HashType.ValueType  # 8500
    AIX_SMD5: _HashType.ValueType  # 6300
    AIX_SSHA1: _HashType.ValueType  # 6700
    AIX_SSHA256: _HashType.ValueType  # 6400
    AIX_SSHA512: _HashType.ValueType  # 6500
    LM: _HashType.ValueType  # 3000
    """LM"""
    QNX_MD5: _HashType.ValueType  # 19000
    """QNX /etc/shadow (MD5)"""
    QNX_SHA256: _HashType.ValueType  # 19100
    """QNX /etc/shadow (SHA256)"""
    QNX_SHA512: _HashType.ValueType  # 19200
    """QNX /etc/shadow (SHA512)"""
    DPAPI_V1_CTX_1_AND_2: _HashType.ValueType  # 15300
    """DPAPI masterkey file v1 (context 1 and 2)"""
    DPAPI_V1_CTX_3: _HashType.ValueType  # 15310
    """DPAPI masterkey file v1 (context 3)"""
    DPAPI_V2_CTX_1_AND_2: _HashType.ValueType  # 15900
    """DPAPI masterkey file v2 (context 1)"""
    DPAPI_V2_CTX_3: _HashType.ValueType  # 15910
    """DPAPI masterkey file v2 (context 3)"""
    GRUB_2: _HashType.ValueType  # 7200
    """GRUB 2"""
    MS_AZURE_SYNC: _HashType.ValueType  # 12800
    """MS-AzureSync PBKDF2-HMAC-SHA256"""
    BSDI_CRYPT: _HashType.ValueType  # 12400
    """BSDi Crypt, Extended DES"""
    NTLM: _HashType.ValueType  # 1000
    """NTLM"""
    RADMIN2: _HashType.ValueType  # 9900
    """Radmin2"""
    SAMSUNG_ANDROID: _HashType.ValueType  # 5800
    """Samsung Android Password/PIN"""
    WINDOWS_HELLO_PIN: _HashType.ValueType  # 28100
    """Windows Hello PIN/Password"""
    WINDOWS_PHONE: _HashType.ValueType  # 13800
    """Windows Phone 8+ PIN/Password"""
    CISCO_ASA_MD5: _HashType.ValueType  # 2410
    """Cisco-ASA MD5"""
    CISCO_IOS_PBKDF2_SHA256: _HashType.ValueType  # 9200
    """Cisco-IOS $8$ (PBKDF2-SHA256)"""
    CISCO_IOS_SCRYPT: _HashType.ValueType  # 9300
    """Cisco-IOS $9$ (scrypt)"""
    CISCO_PIX_MD5: _HashType.ValueType  # 2400
    """Cisco-Pix MD5"""
    CITRIX_NETSCALER_SHA1: _HashType.ValueType  # 8100
    """Citrix NetScaler (SHA1)"""
    CITRIX_NETSCALER_SHA512: _HashType.ValueType  # 22200
    """Citrix NetScaler (SHA512)"""
    DCC: _HashType.ValueType  # 1100
    """Domain Cached Credentials (DCC), MS Cache"""
    DCC2: _HashType.ValueType  # 2100
    """Domain Cached Credentials 2 (DCC2), MS Cache 2"""
    MACOS_10_8: _HashType.ValueType  # 7100
    """...

    macOS v10.8+ (PBKDF2-SHA512)
    """
    INVALID: _HashType.ValueType  # 9999
    """...

    Invalid hash type
    """
    BCRYPT_UNIX: _HashType.ValueType  # 3200
    """Out of order
    bcrypt
    """
    SHA512_CRYPT_UNIX: _HashType.ValueType  # 1800
    """sha512crypt $6$, SHA512 (Unix)"""

class HashType(_HashType, metaclass=_HashTypeEnumTypeWrapper): ...

MD5: HashType.ValueType  # 0
"""MD5 - zero must come first in an enum"""
MD4: HashType.ValueType  # 900
"""MD4"""
SHA1: HashType.ValueType  # 100
"""MD5
SHA1
"""
SHA2_224: HashType.ValueType  # 1300
"""SHA2-224"""
SHA2_256: HashType.ValueType  # 1400
"""SHA2-256"""
SHA2_384: HashType.ValueType  # 10800
"""SHA2-384"""
SHA2_512: HashType.ValueType  # 1700
"""SHA2-512"""
SHA3_224: HashType.ValueType  # 17300
"""SHA3-224"""
SHA3_256: HashType.ValueType  # 17400
"""SHA3-256"""
SHA3_384: HashType.ValueType  # 17500
"""SHA3-384"""
SHA3_512: HashType.ValueType  # 17600
"""SHA3-512"""
RIPEMD_160: HashType.ValueType  # 6000
"""RIPEMD-160"""
BLAKE2B_256: HashType.ValueType  # 600
"""BLAKE2b-512"""
GOST_R_32_11_2012_256: HashType.ValueType  # 11700
"""GOST R 34.11-2012 (Streebog) 256-bit, big-endian"""
GOST_R_32_11_2012_512: HashType.ValueType  # 11800
"""GOST R 34.11-2012 (Streebog) 512-bit, big-endian"""
GOST_R_34_11_94: HashType.ValueType  # 6900
"""GOST R 34.11-94"""
GPG: HashType.ValueType  # 17010
"""GPG (AES-128/AES-256 (SHA-1($pass)))"""
HALF_MD5: HashType.ValueType  # 5100
"""Half MD5"""
KECCAK_224: HashType.ValueType  # 17700
"""Keccak-224"""
KECCAK_256: HashType.ValueType  # 17800
"""Keccak-256"""
KECCAK_384: HashType.ValueType  # 17900
"""Keccak-384"""
KECCAK_512: HashType.ValueType  # 18000
"""Keccak-512"""
WHIRLPOOL: HashType.ValueType  # 6100
"""Whirlpool"""
SIPHASH: HashType.ValueType  # 10100
"""SipHash"""
MD5_UTF16LE: HashType.ValueType  # 70
"""md5(utf16le($pass))"""
SHA1_UTF16LE: HashType.ValueType  # 170
"""sha1(utf16le($pass))"""
SHA256_UTF16LE: HashType.ValueType  # 1470
"""sha256(utf16le($pass))"""
SHA384_UTF16LE: HashType.ValueType  # 10870
"""sha384(utf16le($pass))"""
SHA512_UTF16LE: HashType.ValueType  # 1770
"""sha512(utf16le($pass))"""
BLAKE2B_512_PW_SALT: HashType.ValueType  # 610
"""BLAKE2b-512($pass.$salt)"""
BLAKE2B_512_SALT_PW: HashType.ValueType  # 620
"""BLAKE2b-512($salt.$pass)"""
MD5_PW_SALT: HashType.ValueType  # 10
"""md5($pass.$salt)"""
MD5_SALT_PW: HashType.ValueType  # 20
"""md5($salt.$pass)"""
MD5_SALT_PW_SALT: HashType.ValueType  # 3800
"""md5($salt.$pass.$salt)"""
MD5_SALT_MD5_PW: HashType.ValueType  # 3710
"""md5($salt.md5($pass))"""
CRC32: HashType.ValueType  # 11500
"""... TODO fill in the rest ...

CRC32
"""
CRC32C: HashType.ValueType  # 27900
"""CRC32B"""
CRC64Jones: HashType.ValueType  # 28000
"""CRC64-Jones"""
JAVA_OBJECT: HashType.ValueType  # 18700
MURMUR: HashType.ValueType  # 25700
"""MurmurHash"""
MURMUR3: HashType.ValueType  # 27800
"""MurmurHash3"""
THREE_DES: HashType.ValueType  # 14100
"""3DES (PT = $salt, key = $pass)"""
DES: HashType.ValueType  # 14000
"""DES (PT = $salt, key = $pass)"""
AES_128_ECB: HashType.ValueType  # 26401
"""AES-128-ECB NOKDF (PT = $salt, key = $pass)"""
AES_192_ECB: HashType.ValueType  # 26402
""" AES-192-ECB NOKDF (PT = $salt, key = $pass)"""
AES_256_ECB: HashType.ValueType  # 26403
"""AES-256-ECB NOKDF (PT = $salt, key = $pass)"""
CHA_CHA_20: HashType.ValueType  # 15400
"""ChaCha20"""
LINUX_KERNEL_CRYPTO_API_24: HashType.ValueType  # 14500
"""Linux Kernel Crypto API (2.4)"""
SKIP_32: HashType.ValueType  # 14900
"""Skip32 (PT = $salt, key = $pass)"""
PBKDF2_HMAC_MD5: HashType.ValueType  # 11900
"""PBKDF2-HMAC-MD5"""
PBKDF2_HMAC_SHA1: HashType.ValueType  # 12000
"""PBKDF2-HMAC-SHA1"""
PBKDF2_HMAC_SHA256: HashType.ValueType  # 10900
"""PBKDF2-HMAC-SHA256"""
PBKDF2_HMAC_SHA512: HashType.ValueType  # 12100
"""PBKDF2-HMAC-SHA512"""
SCRYPT: HashType.ValueType  # 8900
"""scrypt"""
PHPASS: HashType.ValueType  # 400
"""phpass"""
TACACS_PLUS: HashType.ValueType  # 16100
"""TACACS+"""
SIP_DIGEST: HashType.ValueType  # 11400
"""SIP digest authentication (MD5)"""
IKE_MD5: HashType.ValueType  # 5300
"""IKE-PSK MD5"""
IKE_SHA1: HashType.ValueType  # 5400
"""IKE-PSK SHA1"""
SNMP_V3_HMAC_MD5_96: HashType.ValueType  # 25100
"""SNMPv3 HMAC-MD5-96"""
SNMP_V3_HMAC_MD5_96__SHA1_96: HashType.ValueType  # 25000
"""SNMPv3 HMAC-MD5-96 / HMAC-SHA1-96"""
SNMP_V3_HMAC_SHA1_96: HashType.ValueType  # 25200
"""SNMPv3 HMAC-SHA1-96"""
SNMP_V3_HMAC_SHA224_128: HashType.ValueType  # 26700
"""SNMPv3 HMAC-SHA224-128"""
SNMP_V3_HMAC_SHA256_192: HashType.ValueType  # 26800
"""SNMPv3 HMAC-SHA256-192"""
SNMP_V3_HMAC_SHA384_256: HashType.ValueType  # 26900
"""SNMPv3 HMAC-SHA384-256"""
SNMP_V3_HMAC_SHA512_384: HashType.ValueType  # 27300
"""SNMPv3 HMAC-SHA512-384"""
WPA_EAPOL_PBKDF2: HashType.ValueType  # 2500
"""WPA-EAPOL-PBKDF2"""
WPA_EAPOL_PMK: HashType.ValueType  # 2501
"""WPA-EAPOL-PMK"""
WPA_PBKDF2_PMKID_EAPOL: HashType.ValueType  # 22000
"""WPA-PBKDF2-PMKID+EAPOL"""
WPA_PMK_PMKID_EAPOL: HashType.ValueType  # 22001
"""WPA-PMK-PMKID+EAPOL"""
WPA_PMKID_PBKDF2: HashType.ValueType  # 16800
"""WPA-PMKID-PBKDF2"""
WPA_PMKID_PMK: HashType.ValueType  # 16801
"""WPA-PMKID-PMK"""
IPMI2_PAKP_HMAC_SHA1: HashType.ValueType  # 7300
"""IPMI2 RAKP HMAC-SHA1"""
CRAM_MD5: HashType.ValueType  # 10200
"""CRAM-MD5"""
JWT: HashType.ValueType  # 16500
"""JWT (JSON Web Token)"""
RADMIN_3: HashType.ValueType  # 29200
"""Radmin3"""
KERBEROS_17_TGS_REP: HashType.ValueType  # 19600
"""Kerberos 5, etype 17, TGS-REP"""
KERBEROS_17_PREAUTH: HashType.ValueType  # 19800
"""Kerberos 5, etype 17, Pre-Auth"""
KERBEROS_17_DB: HashType.ValueType  # 28800
"""Kerberos 5, etype 17, DB"""
KERBEROS_18_TGS_REP: HashType.ValueType  # 19700
"""Kerberos 5, etype 18, TGS-REP"""
KERBEROS_18_PREAUTH: HashType.ValueType  # 19900
"""Kerberos 5, etype 18, Pre-Auth"""
KERBEROS_18_DB: HashType.ValueType  # 28900
"""Kerberos 5, etype 18, DB"""
KERBEROS_23_SA_REQ_PREAUTH: HashType.ValueType  # 7500
"""Kerberos 5, etype 23, AS-REQ Pre-Auth"""
KERBEROS_23_TGS_REP: HashType.ValueType  # 13100
"""Kerberos 5, etype 23, TGS-REP"""
KERBEROS_23_AS_REP: HashType.ValueType  # 18200
"""Kerberos 5, etype 23, AS-REP"""
NET_NTLM_V1: HashType.ValueType  # 5500
"""NetNTLMv1 / NetNTLMv1+ESS"""
NET_NTLM_V1_NT: HashType.ValueType  # 27000
"""NetNTLMv1 / NetNTLMv1+ESS (NT)"""
NET_NTLM_V2: HashType.ValueType  # 5600
"""NetNTLMv2"""
NET_NTLM_V2_NT: HashType.ValueType  # 27100
"""NetNTLMv2 (NT)"""
FLASK: HashType.ValueType  # 29100
"""Flask Session Cookie ($salt.$salt.$pass)"""
ISCSI_CHAP: HashType.ValueType  # 4800
"""iSCSI CHAP authentication, MD5(CHAP)"""
RACF: HashType.ValueType  # 8500
AIX_SMD5: HashType.ValueType  # 6300
AIX_SSHA1: HashType.ValueType  # 6700
AIX_SSHA256: HashType.ValueType  # 6400
AIX_SSHA512: HashType.ValueType  # 6500
LM: HashType.ValueType  # 3000
"""LM"""
QNX_MD5: HashType.ValueType  # 19000
"""QNX /etc/shadow (MD5)"""
QNX_SHA256: HashType.ValueType  # 19100
"""QNX /etc/shadow (SHA256)"""
QNX_SHA512: HashType.ValueType  # 19200
"""QNX /etc/shadow (SHA512)"""
DPAPI_V1_CTX_1_AND_2: HashType.ValueType  # 15300
"""DPAPI masterkey file v1 (context 1 and 2)"""
DPAPI_V1_CTX_3: HashType.ValueType  # 15310
"""DPAPI masterkey file v1 (context 3)"""
DPAPI_V2_CTX_1_AND_2: HashType.ValueType  # 15900
"""DPAPI masterkey file v2 (context 1)"""
DPAPI_V2_CTX_3: HashType.ValueType  # 15910
"""DPAPI masterkey file v2 (context 3)"""
GRUB_2: HashType.ValueType  # 7200
"""GRUB 2"""
MS_AZURE_SYNC: HashType.ValueType  # 12800
"""MS-AzureSync PBKDF2-HMAC-SHA256"""
BSDI_CRYPT: HashType.ValueType  # 12400
"""BSDi Crypt, Extended DES"""
NTLM: HashType.ValueType  # 1000
"""NTLM"""
RADMIN2: HashType.ValueType  # 9900
"""Radmin2"""
SAMSUNG_ANDROID: HashType.ValueType  # 5800
"""Samsung Android Password/PIN"""
WINDOWS_HELLO_PIN: HashType.ValueType  # 28100
"""Windows Hello PIN/Password"""
WINDOWS_PHONE: HashType.ValueType  # 13800
"""Windows Phone 8+ PIN/Password"""
CISCO_ASA_MD5: HashType.ValueType  # 2410
"""Cisco-ASA MD5"""
CISCO_IOS_PBKDF2_SHA256: HashType.ValueType  # 9200
"""Cisco-IOS $8$ (PBKDF2-SHA256)"""
CISCO_IOS_SCRYPT: HashType.ValueType  # 9300
"""Cisco-IOS $9$ (scrypt)"""
CISCO_PIX_MD5: HashType.ValueType  # 2400
"""Cisco-Pix MD5"""
CITRIX_NETSCALER_SHA1: HashType.ValueType  # 8100
"""Citrix NetScaler (SHA1)"""
CITRIX_NETSCALER_SHA512: HashType.ValueType  # 22200
"""Citrix NetScaler (SHA512)"""
DCC: HashType.ValueType  # 1100
"""Domain Cached Credentials (DCC), MS Cache"""
DCC2: HashType.ValueType  # 2100
"""Domain Cached Credentials 2 (DCC2), MS Cache 2"""
MACOS_10_8: HashType.ValueType  # 7100
"""...

macOS v10.8+ (PBKDF2-SHA512)
"""
INVALID: HashType.ValueType  # 9999
"""...

Invalid hash type
"""
BCRYPT_UNIX: HashType.ValueType  # 3200
"""Out of order
bcrypt
"""
SHA512_CRYPT_UNIX: HashType.ValueType  # 1800
"""sha512crypt $6$, SHA512 (Unix)"""

class _States:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _StatesEnumTypeWrapper(_EnumTypeWrapper[_States.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    IDLE: _States.ValueType  # 0
    CRACKING: _States.ValueType  # 1
    INITIALIZING: _States.ValueType  # 2

class States(_States, metaclass=_StatesEnumTypeWrapper): ...

IDLE: States.ValueType  # 0
CRACKING: States.ValueType  # 1
INITIALIZING: States.ValueType  # 2

class _CrackJobStatus:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _CrackJobStatusEnumTypeWrapper(_EnumTypeWrapper[_CrackJobStatus.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    IN_PROGRESS: _CrackJobStatus.ValueType  # 0
    COMPLETED: _CrackJobStatus.ValueType  # 1
    FAILED: _CrackJobStatus.ValueType  # 2

class CrackJobStatus(_CrackJobStatus, metaclass=_CrackJobStatusEnumTypeWrapper): ...

IN_PROGRESS: CrackJobStatus.ValueType  # 0
COMPLETED: CrackJobStatus.ValueType  # 1
FAILED: CrackJobStatus.ValueType  # 2

class _CrackAttackMode:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _CrackAttackModeEnumTypeWrapper(_EnumTypeWrapper[_CrackAttackMode.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    STRAIGHT: _CrackAttackMode.ValueType  # 0
    COMBINATION: _CrackAttackMode.ValueType  # 1
    BRUTEFORCE: _CrackAttackMode.ValueType  # 3
    HYBRID_WORDLIST_MASK: _CrackAttackMode.ValueType  # 6
    HYBRID_MASK_WORDLIST: _CrackAttackMode.ValueType  # 7
    ASSOCIATION: _CrackAttackMode.ValueType  # 9
    NO_ATTACK: _CrackAttackMode.ValueType  # 10

class CrackAttackMode(_CrackAttackMode, metaclass=_CrackAttackModeEnumTypeWrapper): ...

STRAIGHT: CrackAttackMode.ValueType  # 0
COMBINATION: CrackAttackMode.ValueType  # 1
BRUTEFORCE: CrackAttackMode.ValueType  # 3
HYBRID_WORDLIST_MASK: CrackAttackMode.ValueType  # 6
HYBRID_MASK_WORDLIST: CrackAttackMode.ValueType  # 7
ASSOCIATION: CrackAttackMode.ValueType  # 9
NO_ATTACK: CrackAttackMode.ValueType  # 10

class _CrackEncoding:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _CrackEncodingEnumTypeWrapper(_EnumTypeWrapper[_CrackEncoding.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    INVALID_ENCODING: _CrackEncoding.ValueType  # 0
    ISO_8859_15: _CrackEncoding.ValueType  # 1
    UTF_32LE: _CrackEncoding.ValueType  # 2

class CrackEncoding(_CrackEncoding, metaclass=_CrackEncodingEnumTypeWrapper): ...

INVALID_ENCODING: CrackEncoding.ValueType  # 0
ISO_8859_15: CrackEncoding.ValueType  # 1
UTF_32LE: CrackEncoding.ValueType  # 2

class _CrackOutfileFormat:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _CrackOutfileFormatEnumTypeWrapper(_EnumTypeWrapper[_CrackOutfileFormat.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    INVALID_FORMAT: _CrackOutfileFormat.ValueType  # 0
    HASH_SALT: _CrackOutfileFormat.ValueType  # 1
    """1 | hash[:salt]"""
    PLAIN: _CrackOutfileFormat.ValueType  # 2
    """2 | plain"""
    HEX_PLAIN: _CrackOutfileFormat.ValueType  # 3
    """3 | hex_plain"""
    CRACK_POS: _CrackOutfileFormat.ValueType  # 4
    """4 | crack_pos"""
    TIMESTAMP_ABSOLUTE: _CrackOutfileFormat.ValueType  # 5
    """5 | timestamp absolute"""
    TIMESTAMP_RELATIVE: _CrackOutfileFormat.ValueType  # 6
    """6 | timestamp relative"""

class CrackOutfileFormat(_CrackOutfileFormat, metaclass=_CrackOutfileFormatEnumTypeWrapper): ...

INVALID_FORMAT: CrackOutfileFormat.ValueType  # 0
HASH_SALT: CrackOutfileFormat.ValueType  # 1
"""1 | hash[:salt]"""
PLAIN: CrackOutfileFormat.ValueType  # 2
"""2 | plain"""
HEX_PLAIN: CrackOutfileFormat.ValueType  # 3
"""3 | hex_plain"""
CRACK_POS: CrackOutfileFormat.ValueType  # 4
"""4 | crack_pos"""
TIMESTAMP_ABSOLUTE: CrackOutfileFormat.ValueType  # 5
"""5 | timestamp absolute"""
TIMESTAMP_RELATIVE: CrackOutfileFormat.ValueType  # 6
"""6 | timestamp relative"""

class _CrackWorkloadProfile:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _CrackWorkloadProfileEnumTypeWrapper(_EnumTypeWrapper[_CrackWorkloadProfile.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    INVALID_WORKLOAD_PROFILE: _CrackWorkloadProfile.ValueType  # 0
    LOW: _CrackWorkloadProfile.ValueType  # 1
    DEFAULT: _CrackWorkloadProfile.ValueType  # 2
    HIGH: _CrackWorkloadProfile.ValueType  # 3
    NIGHTMARE: _CrackWorkloadProfile.ValueType  # 4

class CrackWorkloadProfile(_CrackWorkloadProfile, metaclass=_CrackWorkloadProfileEnumTypeWrapper): ...

INVALID_WORKLOAD_PROFILE: CrackWorkloadProfile.ValueType  # 0
LOW: CrackWorkloadProfile.ValueType  # 1
DEFAULT: CrackWorkloadProfile.ValueType  # 2
HIGH: CrackWorkloadProfile.ValueType  # 3
NIGHTMARE: CrackWorkloadProfile.ValueType  # 4

class _CrackFileType:
    ValueType = NewType("ValueType", int)
    V: typing_extensions.TypeAlias = ValueType

class _CrackFileTypeEnumTypeWrapper(_EnumTypeWrapper[_CrackFileType.ValueType], type):
    DESCRIPTOR: EnumDescriptor
    INVALID_TYPE: _CrackFileType.ValueType  # 0
    WORDLIST: _CrackFileType.ValueType  # 1
    RULES: _CrackFileType.ValueType  # 2
    MARKOV_HCSTAT2: _CrackFileType.ValueType  # 3

class CrackFileType(_CrackFileType, metaclass=_CrackFileTypeEnumTypeWrapper): ...

INVALID_TYPE: CrackFileType.ValueType  # 0
WORDLIST: CrackFileType.ValueType  # 1
RULES: CrackFileType.ValueType  # 2
MARKOV_HCSTAT2: CrackFileType.ValueType  # 3

@typing_extensions.final
class Version(Message):
    """[ Version ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    MAJOR_FIELD_NUMBER: int
    MINOR_FIELD_NUMBER: int
    PATCH_FIELD_NUMBER: int
    COMMIT_FIELD_NUMBER: int
    DIRTY_FIELD_NUMBER: int
    COMPILEDAT_FIELD_NUMBER: int
    OS_FIELD_NUMBER: int
    ARCH_FIELD_NUMBER: int
    Major: int
    Minor: int
    Patch: int
    Commit: str
    Dirty: bool
    CompiledAt: int
    OS: str
    Arch: str
    def __init__(
        self,
        *,
        Major: int = ...,
        Minor: int = ...,
        Patch: int = ...,
        Commit: str = ...,
        Dirty: bool = ...,
        CompiledAt: int = ...,
        OS: str = ...,
        Arch: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Arch", b"Arch", "Commit", b"Commit", "CompiledAt", b"CompiledAt", "Dirty", b"Dirty", "Major", b"Major", "Minor", b"Minor", "OS", b"OS", "Patch", b"Patch"]) -> None: ...

@typing_extensions.final
class ClientLogData(Message):
    """[ Client Logs ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    STREAM_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    Stream: str
    Data: bytes
    def __init__(
        self,
        *,
        Stream: str = ...,
        Data: bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Data", b"Data", "Stream", b"Stream"]) -> None: ...

@typing_extensions.final
class Session(Message):
    """[ Core ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    HOSTNAME_FIELD_NUMBER: int
    UUID_FIELD_NUMBER: int
    USERNAME_FIELD_NUMBER: int
    UID_FIELD_NUMBER: int
    GID_FIELD_NUMBER: int
    OS_FIELD_NUMBER: int
    ARCH_FIELD_NUMBER: int
    TRANSPORT_FIELD_NUMBER: int
    REMOTEADDRESS_FIELD_NUMBER: int
    PID_FIELD_NUMBER: int
    FILENAME_FIELD_NUMBER: int
    LASTCHECKIN_FIELD_NUMBER: int
    ACTIVEC2_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    EVASION_FIELD_NUMBER: int
    ISDEAD_FIELD_NUMBER: int
    RECONNECTINTERVAL_FIELD_NUMBER: int
    PROXYURL_FIELD_NUMBER: int
    BURNED_FIELD_NUMBER: int
    EXTENSIONS_FIELD_NUMBER: int
    PEERID_FIELD_NUMBER: int
    LOCALE_FIELD_NUMBER: int
    FIRSTCONTACT_FIELD_NUMBER: int
    INTEGRITY_FIELD_NUMBER: int
    ID: str
    Name: str
    Hostname: str
    UUID: str
    Username: str
    UID: str
    GID: str
    OS: str
    Arch: str
    Transport: str
    RemoteAddress: str
    PID: int
    Filename: str
    """Argv[0]"""
    LastCheckin: int
    ActiveC2: str
    Version: str
    Evasion: bool
    IsDead: bool
    ReconnectInterval: int
    ProxyURL: str
    Burned: bool
    @property
    def Extensions(self) -> RepeatedScalarFieldContainer[str]: ...
    PeerID: int
    """string ConfigID = 24;"""
    Locale: str
    FirstContact: int
    Integrity: str
    def __init__(
        self,
        *,
        ID: str = ...,
        Name: str = ...,
        Hostname: str = ...,
        UUID: str = ...,
        Username: str = ...,
        UID: str = ...,
        GID: str = ...,
        OS: str = ...,
        Arch: str = ...,
        Transport: str = ...,
        RemoteAddress: str = ...,
        PID: int = ...,
        Filename: str = ...,
        LastCheckin: int = ...,
        ActiveC2: str = ...,
        Version: str = ...,
        Evasion: bool = ...,
        IsDead: bool = ...,
        ReconnectInterval: int = ...,
        ProxyURL: str = ...,
        Burned: bool = ...,
        Extensions: Iterable[str] | None = ...,
        PeerID: int = ...,
        Locale: str = ...,
        FirstContact: int = ...,
        Integrity: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ActiveC2", b"ActiveC2", "Arch", b"Arch", "Burned", b"Burned", "Evasion", b"Evasion", "Extensions", b"Extensions", "Filename", b"Filename", "FirstContact", b"FirstContact", "GID", b"GID", "Hostname", b"Hostname", "ID", b"ID", "Integrity", b"Integrity", "IsDead", b"IsDead", "LastCheckin", b"LastCheckin", "Locale", b"Locale", "Name", b"Name", "OS", b"OS", "PID", b"PID", "PeerID", b"PeerID", "ProxyURL", b"ProxyURL", "ReconnectInterval", b"ReconnectInterval", "RemoteAddress", b"RemoteAddress", "Transport", b"Transport", "UID", b"UID", "UUID", b"UUID", "Username", b"Username", "Version", b"Version"]) -> None: ...

@typing_extensions.final
class Beacon(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    HOSTNAME_FIELD_NUMBER: int
    UUID_FIELD_NUMBER: int
    USERNAME_FIELD_NUMBER: int
    UID_FIELD_NUMBER: int
    GID_FIELD_NUMBER: int
    OS_FIELD_NUMBER: int
    ARCH_FIELD_NUMBER: int
    TRANSPORT_FIELD_NUMBER: int
    REMOTEADDRESS_FIELD_NUMBER: int
    PID_FIELD_NUMBER: int
    FILENAME_FIELD_NUMBER: int
    LASTCHECKIN_FIELD_NUMBER: int
    ACTIVEC2_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    EVASION_FIELD_NUMBER: int
    ISDEAD_FIELD_NUMBER: int
    PROXYURL_FIELD_NUMBER: int
    RECONNECTINTERVAL_FIELD_NUMBER: int
    INTERVAL_FIELD_NUMBER: int
    JITTER_FIELD_NUMBER: int
    BURNED_FIELD_NUMBER: int
    NEXTCHECKIN_FIELD_NUMBER: int
    TASKSCOUNT_FIELD_NUMBER: int
    TASKSCOUNTCOMPLETED_FIELD_NUMBER: int
    LOCALE_FIELD_NUMBER: int
    FIRSTCONTACT_FIELD_NUMBER: int
    INTEGRITY_FIELD_NUMBER: int
    ID: str
    Name: str
    Hostname: str
    UUID: str
    Username: str
    UID: str
    GID: str
    OS: str
    Arch: str
    Transport: str
    RemoteAddress: str
    PID: int
    Filename: str
    """Argv[0]"""
    LastCheckin: int
    ActiveC2: str
    Version: str
    Evasion: bool
    IsDead: bool
    ProxyURL: str
    ReconnectInterval: int
    Interval: int
    Jitter: int
    Burned: bool
    NextCheckin: int
    TasksCount: int
    TasksCountCompleted: int
    Locale: str
    FirstContact: int
    Integrity: str
    def __init__(
        self,
        *,
        ID: str = ...,
        Name: str = ...,
        Hostname: str = ...,
        UUID: str = ...,
        Username: str = ...,
        UID: str = ...,
        GID: str = ...,
        OS: str = ...,
        Arch: str = ...,
        Transport: str = ...,
        RemoteAddress: str = ...,
        PID: int = ...,
        Filename: str = ...,
        LastCheckin: int = ...,
        ActiveC2: str = ...,
        Version: str = ...,
        Evasion: bool = ...,
        IsDead: bool = ...,
        ProxyURL: str = ...,
        ReconnectInterval: int = ...,
        Interval: int = ...,
        Jitter: int = ...,
        Burned: bool = ...,
        NextCheckin: int = ...,
        TasksCount: int = ...,
        TasksCountCompleted: int = ...,
        Locale: str = ...,
        FirstContact: int = ...,
        Integrity: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ActiveC2", b"ActiveC2", "Arch", b"Arch", "Burned", b"Burned", "Evasion", b"Evasion", "Filename", b"Filename", "FirstContact", b"FirstContact", "GID", b"GID", "Hostname", b"Hostname", "ID", b"ID", "Integrity", b"Integrity", "Interval", b"Interval", "IsDead", b"IsDead", "Jitter", b"Jitter", "LastCheckin", b"LastCheckin", "Locale", b"Locale", "Name", b"Name", "NextCheckin", b"NextCheckin", "OS", b"OS", "PID", b"PID", "ProxyURL", b"ProxyURL", "ReconnectInterval", b"ReconnectInterval", "RemoteAddress", b"RemoteAddress", "TasksCount", b"TasksCount", "TasksCountCompleted", b"TasksCountCompleted", "Transport", b"Transport", "UID", b"UID", "UUID", b"UUID", "Username", b"Username", "Version", b"Version"]) -> None: ...

@typing_extensions.final
class Beacons(Message):
    DESCRIPTOR: Descriptor

    BEACONS_FIELD_NUMBER: int
    @property
    def Beacons(self) -> RepeatedCompositeFieldContainer[Beacon]: ...
    def __init__(
        self,
        *,
        Beacons: Iterable[Beacon] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Beacons", b"Beacons"]) -> None: ...

@typing_extensions.final
class BeaconTask(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    BEACONID_FIELD_NUMBER: int
    CREATEDAT_FIELD_NUMBER: int
    STATE_FIELD_NUMBER: int
    SENTAT_FIELD_NUMBER: int
    COMPLETEDAT_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    RESPONSE_FIELD_NUMBER: int
    DESCRIPTION_FIELD_NUMBER: int
    ID: str
    BeaconID: str
    CreatedAt: int
    State: str
    SentAt: int
    CompletedAt: int
    Request: bytes
    Response: bytes
    Description: str
    def __init__(
        self,
        *,
        ID: str = ...,
        BeaconID: str = ...,
        CreatedAt: int = ...,
        State: str = ...,
        SentAt: int = ...,
        CompletedAt: int = ...,
        Request: bytes = ...,
        Response: bytes = ...,
        Description: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["BeaconID", b"BeaconID", "CompletedAt", b"CompletedAt", "CreatedAt", b"CreatedAt", "Description", b"Description", "ID", b"ID", "Request", b"Request", "Response", b"Response", "SentAt", b"SentAt", "State", b"State"]) -> None: ...

@typing_extensions.final
class BeaconTasks(Message):
    DESCRIPTOR: Descriptor

    BEACONID_FIELD_NUMBER: int
    TASKS_FIELD_NUMBER: int
    BeaconID: str
    @property
    def Tasks(self) -> RepeatedCompositeFieldContainer[BeaconTask]: ...
    def __init__(
        self,
        *,
        BeaconID: str = ...,
        Tasks: Iterable[BeaconTask] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["BeaconID", b"BeaconID", "Tasks", b"Tasks"]) -> None: ...

@typing_extensions.final
class BeaconIntegrity(Message):
    DESCRIPTOR: Descriptor

    BEACONID_FIELD_NUMBER: int
    INTEGRITY_FIELD_NUMBER: int
    BeaconID: str
    Integrity: str
    def __init__(
        self,
        *,
        BeaconID: str = ...,
        Integrity: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["BeaconID", b"BeaconID", "Integrity", b"Integrity"]) -> None: ...

@typing_extensions.final
class ImplantC2(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    PRIORITY_FIELD_NUMBER: int
    URL_FIELD_NUMBER: int
    OPTIONS_FIELD_NUMBER: int
    ID: str
    Priority: int
    URL: str
    Options: str
    """Protocol specific options"""
    def __init__(
        self,
        *,
        ID: str = ...,
        Priority: int = ...,
        URL: str = ...,
        Options: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ID", b"ID", "Options", b"Options", "Priority", b"Priority", "URL", b"URL"]) -> None: ...

@typing_extensions.final
class ImplantConfig(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    IMPLANTBUILDS_FIELD_NUMBER: int
    IMPLANTPROFILEID_FIELD_NUMBER: int
    ISBEACON_FIELD_NUMBER: int
    BEACONINTERVAL_FIELD_NUMBER: int
    BEACONJITTER_FIELD_NUMBER: int
    GOOS_FIELD_NUMBER: int
    GOARCH_FIELD_NUMBER: int
    DEBUG_FIELD_NUMBER: int
    EVASION_FIELD_NUMBER: int
    OBFUSCATESYMBOLS_FIELD_NUMBER: int
    TEMPLATENAME_FIELD_NUMBER: int
    SGNENABLED_FIELD_NUMBER: int
    INCLUDEMTLS_FIELD_NUMBER: int
    INCLUDEHTTP_FIELD_NUMBER: int
    INCLUDEWG_FIELD_NUMBER: int
    INCLUDEDNS_FIELD_NUMBER: int
    INCLUDENAMEPIPE_FIELD_NUMBER: int
    INCLUDETCP_FIELD_NUMBER: int
    WGPEERTUNIP_FIELD_NUMBER: int
    WGKEYEXCHANGEPORT_FIELD_NUMBER: int
    WGTCPCOMMSPORT_FIELD_NUMBER: int
    RECONNECTINTERVAL_FIELD_NUMBER: int
    MAXCONNECTIONERRORS_FIELD_NUMBER: int
    POLLTIMEOUT_FIELD_NUMBER: int
    C2_FIELD_NUMBER: int
    CANARYDOMAINS_FIELD_NUMBER: int
    CONNECTIONSTRATEGY_FIELD_NUMBER: int
    LIMITDOMAINJOINED_FIELD_NUMBER: int
    LIMITDATETIME_FIELD_NUMBER: int
    LIMITHOSTNAME_FIELD_NUMBER: int
    LIMITUSERNAME_FIELD_NUMBER: int
    LIMITFILEEXISTS_FIELD_NUMBER: int
    LIMITLOCALE_FIELD_NUMBER: int
    FORMAT_FIELD_NUMBER: int
    ISSHAREDLIB_FIELD_NUMBER: int
    ISSERVICE_FIELD_NUMBER: int
    ISSHELLCODE_FIELD_NUMBER: int
    RUNATLOAD_FIELD_NUMBER: int
    DEBUGFILE_FIELD_NUMBER: int
    HTTPC2CONFIGNAME_FIELD_NUMBER: int
    NETGOENABLED_FIELD_NUMBER: int
    TRAFFICENCODERSENABLED_FIELD_NUMBER: int
    TRAFFICENCODERS_FIELD_NUMBER: int
    ASSETS_FIELD_NUMBER: int
    ID: str
    @property
    def ImplantBuilds(self) -> RepeatedCompositeFieldContainer[ImplantBuild]: ...
    ImplantProfileID: str
    IsBeacon: bool
    BeaconInterval: int
    BeaconJitter: int
    GOOS: str
    GOARCH: str
    Debug: bool
    Evasion: bool
    ObfuscateSymbols: bool
    TemplateName: str
    SGNEnabled: bool
    IncludeMTLS: bool
    IncludeHTTP: bool
    IncludeWG: bool
    IncludeDNS: bool
    IncludeNamePipe: bool
    IncludeTCP: bool
    WGPeerTunIP: str
    WGKeyExchangePort: int
    WGTcpCommsPort: int
    ReconnectInterval: int
    MaxConnectionErrors: int
    PollTimeout: int
    @property
    def C2(self) -> RepeatedCompositeFieldContainer[ImplantC2]:
        """c2"""
    @property
    def CanaryDomains(self) -> RepeatedScalarFieldContainer[str]: ...
    ConnectionStrategy: str
    LimitDomainJoined: bool
    LimitDatetime: str
    LimitHostname: str
    LimitUsername: str
    LimitFileExists: str
    LimitLocale: str
    Format: OutputFormat.ValueType
    IsSharedLib: bool
    IsService: bool
    IsShellcode: bool
    RunAtLoad: bool
    DebugFile: str
    HTTPC2ConfigName: str
    NetGoEnabled: bool
    TrafficEncodersEnabled: bool
    @property
    def TrafficEncoders(self) -> RepeatedScalarFieldContainer[str]: ...
    @property
    def Assets(self) -> RepeatedCompositeFieldContainer[File]: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        ImplantBuilds: Iterable[ImplantBuild] | None = ...,
        ImplantProfileID: str = ...,
        IsBeacon: bool = ...,
        BeaconInterval: int = ...,
        BeaconJitter: int = ...,
        GOOS: str = ...,
        GOARCH: str = ...,
        Debug: bool = ...,
        Evasion: bool = ...,
        ObfuscateSymbols: bool = ...,
        TemplateName: str = ...,
        SGNEnabled: bool = ...,
        IncludeMTLS: bool = ...,
        IncludeHTTP: bool = ...,
        IncludeWG: bool = ...,
        IncludeDNS: bool = ...,
        IncludeNamePipe: bool = ...,
        IncludeTCP: bool = ...,
        WGPeerTunIP: str = ...,
        WGKeyExchangePort: int = ...,
        WGTcpCommsPort: int = ...,
        ReconnectInterval: int = ...,
        MaxConnectionErrors: int = ...,
        PollTimeout: int = ...,
        C2: Iterable[ImplantC2] | None = ...,
        CanaryDomains: Iterable[str] | None = ...,
        ConnectionStrategy: str = ...,
        LimitDomainJoined: bool = ...,
        LimitDatetime: str = ...,
        LimitHostname: str = ...,
        LimitUsername: str = ...,
        LimitFileExists: str = ...,
        LimitLocale: str = ...,
        Format: OutputFormat.ValueType = ...,
        IsSharedLib: bool = ...,
        IsService: bool = ...,
        IsShellcode: bool = ...,
        RunAtLoad: bool = ...,
        DebugFile: str = ...,
        HTTPC2ConfigName: str = ...,
        NetGoEnabled: bool = ...,
        TrafficEncodersEnabled: bool = ...,
        TrafficEncoders: Iterable[str] | None = ...,
        Assets: Iterable[File] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Assets", b"Assets", "BeaconInterval", b"BeaconInterval", "BeaconJitter", b"BeaconJitter", "C2", b"C2", "CanaryDomains", b"CanaryDomains", "ConnectionStrategy", b"ConnectionStrategy", "Debug", b"Debug", "DebugFile", b"DebugFile", "Evasion", b"Evasion", "Format", b"Format", "GOARCH", b"GOARCH", "GOOS", b"GOOS", "HTTPC2ConfigName", b"HTTPC2ConfigName", "ID", b"ID", "ImplantBuilds", b"ImplantBuilds", "ImplantProfileID", b"ImplantProfileID", "IncludeDNS", b"IncludeDNS", "IncludeHTTP", b"IncludeHTTP", "IncludeMTLS", b"IncludeMTLS", "IncludeNamePipe", b"IncludeNamePipe", "IncludeTCP", b"IncludeTCP", "IncludeWG", b"IncludeWG", "IsBeacon", b"IsBeacon", "IsService", b"IsService", "IsSharedLib", b"IsSharedLib", "IsShellcode", b"IsShellcode", "LimitDatetime", b"LimitDatetime", "LimitDomainJoined", b"LimitDomainJoined", "LimitFileExists", b"LimitFileExists", "LimitHostname", b"LimitHostname", "LimitLocale", b"LimitLocale", "LimitUsername", b"LimitUsername", "MaxConnectionErrors", b"MaxConnectionErrors", "NetGoEnabled", b"NetGoEnabled", "ObfuscateSymbols", b"ObfuscateSymbols", "PollTimeout", b"PollTimeout", "ReconnectInterval", b"ReconnectInterval", "RunAtLoad", b"RunAtLoad", "SGNEnabled", b"SGNEnabled", "TemplateName", b"TemplateName", "TrafficEncoders", b"TrafficEncoders", "TrafficEncodersEnabled", b"TrafficEncodersEnabled", "WGKeyExchangePort", b"WGKeyExchangePort", "WGPeerTunIP", b"WGPeerTunIP", "WGTcpCommsPort", b"WGTcpCommsPort"]) -> None: ...

@typing_extensions.final
class TrafficEncoder(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    WASM_FIELD_NUMBER: int
    SKIPTESTS_FIELD_NUMBER: int
    TESTID_FIELD_NUMBER: int
    ID: int
    @property
    def Wasm(self) -> File: ...
    SkipTests: bool
    TestID: str
    def __init__(
        self,
        *,
        ID: int = ...,
        Wasm: File | None = ...,
        SkipTests: bool = ...,
        TestID: str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Wasm", b"Wasm"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ID", b"ID", "SkipTests", b"SkipTests", "TestID", b"TestID", "Wasm", b"Wasm"]) -> None: ...

@typing_extensions.final
class TrafficEncoderMap(Message):
    DESCRIPTOR: Descriptor

    @typing_extensions.final
    class EncodersEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        @property
        def value(self) -> TrafficEncoder: ...
        def __init__(
            self,
            *,
            key: str = ...,
            value: TrafficEncoder | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    ENCODERS_FIELD_NUMBER: int
    @property
    def Encoders(self) -> MessageMap[str, TrafficEncoder]:
        """File Name -> TrafficEncoder"""
    def __init__(
        self,
        *,
        Encoders: Mapping[str, TrafficEncoder] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Encoders", b"Encoders"]) -> None: ...

@typing_extensions.final
class TrafficEncoderTest(Message):
    DESCRIPTOR: Descriptor

    NAME_FIELD_NUMBER: int
    COMPLETED_FIELD_NUMBER: int
    SUCCESS_FIELD_NUMBER: int
    DURATION_FIELD_NUMBER: int
    ERR_FIELD_NUMBER: int
    SAMPLE_FIELD_NUMBER: int
    Name: str
    Completed: bool
    Success: bool
    Duration: int
    Err: str
    Sample: bytes
    """Only used on failed tests"""
    def __init__(
        self,
        *,
        Name: str = ...,
        Completed: bool = ...,
        Success: bool = ...,
        Duration: int = ...,
        Err: str = ...,
        Sample: bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Completed", b"Completed", "Duration", b"Duration", "Err", b"Err", "Name", b"Name", "Sample", b"Sample", "Success", b"Success"]) -> None: ...

@typing_extensions.final
class TrafficEncoderTests(Message):
    DESCRIPTOR: Descriptor

    ENCODER_FIELD_NUMBER: int
    TESTS_FIELD_NUMBER: int
    TOTALDURATION_FIELD_NUMBER: int
    TOTALTESTS_FIELD_NUMBER: int
    @property
    def Encoder(self) -> TrafficEncoder: ...
    @property
    def Tests(self) -> RepeatedCompositeFieldContainer[TrafficEncoderTest]: ...
    TotalDuration: int
    TotalTests: int
    def __init__(
        self,
        *,
        Encoder: TrafficEncoder | None = ...,
        Tests: Iterable[TrafficEncoderTest] | None = ...,
        TotalDuration: int = ...,
        TotalTests: int = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Encoder", b"Encoder"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Encoder", b"Encoder", "Tests", b"Tests", "TotalDuration", b"TotalDuration", "TotalTests", b"TotalTests"]) -> None: ...

@typing_extensions.final
class ExternalImplantConfig(Message):
    DESCRIPTOR: Descriptor

    CONFIG_FIELD_NUMBER: int
    BUILD_FIELD_NUMBER: int
    HTTPC2_FIELD_NUMBER: int
    @property
    def Config(self) -> ImplantConfig: ...
    @property
    def Build(self) -> ImplantBuild: ...
    @property
    def HTTPC2(self) -> HTTPC2Config: ...
    def __init__(
        self,
        *,
        Config: ImplantConfig | None = ...,
        Build: ImplantBuild | None = ...,
        HTTPC2: HTTPC2Config | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Build", b"Build", "Config", b"Config", "HTTPC2", b"HTTPC2"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Build", b"Build", "Config", b"Config", "HTTPC2", b"HTTPC2"]) -> None: ...

@typing_extensions.final
class ExternalImplantBinary(Message):
    DESCRIPTOR: Descriptor

    NAME_FIELD_NUMBER: int
    IMPLANTBUILDID_FIELD_NUMBER: int
    FILE_FIELD_NUMBER: int
    Name: str
    ImplantBuildID: str
    @property
    def File(self) -> File: ...
    def __init__(
        self,
        *,
        Name: str = ...,
        ImplantBuildID: str = ...,
        File: File | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["File", b"File"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["File", b"File", "ImplantBuildID", b"ImplantBuildID", "Name", b"Name"]) -> None: ...

@typing_extensions.final
class ImplantBuilds(Message):
    """Configs of previously built implants"""

    DESCRIPTOR: Descriptor

    @typing_extensions.final
    class ConfigsEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        @property
        def value(self) -> ImplantConfig: ...
        def __init__(
            self,
            *,
            key: str = ...,
            value: ImplantConfig | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class ResourceIDsEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        @property
        def value(self) -> ResourceID: ...
        def __init__(
            self,
            *,
            key: str = ...,
            value: ResourceID | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class StagedEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: bool
        def __init__(
            self,
            *,
            key: str = ...,
            value: bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    CONFIGS_FIELD_NUMBER: int
    RESOURCEIDS_FIELD_NUMBER: int
    STAGED_FIELD_NUMBER: int
    @property
    def Configs(self) -> MessageMap[str, ImplantConfig]: ...
    @property
    def ResourceIDs(self) -> MessageMap[str, ResourceID]: ...
    @property
    def staged(self) -> ScalarMap[str, bool]: ...
    def __init__(
        self,
        *,
        Configs: Mapping[str, ImplantConfig] | None = ...,
        ResourceIDs: Mapping[str, ResourceID] | None = ...,
        staged: Mapping[str, bool] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Configs", b"Configs", "ResourceIDs", b"ResourceIDs", "staged", b"staged"]) -> None: ...

@typing_extensions.final
class ImplantStageReq(Message):
    DESCRIPTOR: Descriptor

    BUILD_FIELD_NUMBER: int
    @property
    def Build(self) -> RepeatedScalarFieldContainer[str]: ...
    def __init__(
        self,
        *,
        Build: Iterable[str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Build", b"Build"]) -> None: ...

@typing_extensions.final
class ImplantBuild(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    MD5_FIELD_NUMBER: int
    SHA1_FIELD_NUMBER: int
    SHA256_FIELD_NUMBER: int
    BURNED_FIELD_NUMBER: int
    IMPLANTID_FIELD_NUMBER: int
    IMPLANTCONFIGID_FIELD_NUMBER: int
    AGESERVERPUBLICKEY_FIELD_NUMBER: int
    PEERPUBLICKEY_FIELD_NUMBER: int
    PEERPRIVATEKEY_FIELD_NUMBER: int
    PEERPUBLICKEYSIGNATURE_FIELD_NUMBER: int
    MINISIGNSERVERPUBLICKEY_FIELD_NUMBER: int
    PEERPUBLICKEYDIGEST_FIELD_NUMBER: int
    WGIMPLANTPRIVKEY_FIELD_NUMBER: int
    WGSERVERPUBKEY_FIELD_NUMBER: int
    MTLSCACERT_FIELD_NUMBER: int
    MTLSCERT_FIELD_NUMBER: int
    MTLSKEY_FIELD_NUMBER: int
    STAGE_FIELD_NUMBER: int
    ID: str
    Name: str
    MD5: str
    SHA1: str
    SHA256: str
    Burned: bool
    ImplantID: int
    ImplantConfigID: str
    AgeServerPublicKey: str
    PeerPublicKey: str
    PeerPrivateKey: str
    PeerPublicKeySignature: str
    MinisignServerPublicKey: str
    PeerPublicKeyDigest: str
    WGImplantPrivKey: str
    WGServerPubKey: str
    MtlsCACert: str
    MtlsCert: str
    MtlsKey: str
    Stage: bool
    def __init__(
        self,
        *,
        ID: str = ...,
        Name: str = ...,
        MD5: str = ...,
        SHA1: str = ...,
        SHA256: str = ...,
        Burned: bool = ...,
        ImplantID: int = ...,
        ImplantConfigID: str = ...,
        AgeServerPublicKey: str = ...,
        PeerPublicKey: str = ...,
        PeerPrivateKey: str = ...,
        PeerPublicKeySignature: str = ...,
        MinisignServerPublicKey: str = ...,
        PeerPublicKeyDigest: str = ...,
        WGImplantPrivKey: str = ...,
        WGServerPubKey: str = ...,
        MtlsCACert: str = ...,
        MtlsCert: str = ...,
        MtlsKey: str = ...,
        Stage: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["AgeServerPublicKey", b"AgeServerPublicKey", "Burned", b"Burned", "ID", b"ID", "ImplantConfigID", b"ImplantConfigID", "ImplantID", b"ImplantID", "MD5", b"MD5", "MinisignServerPublicKey", b"MinisignServerPublicKey", "MtlsCACert", b"MtlsCACert", "MtlsCert", b"MtlsCert", "MtlsKey", b"MtlsKey", "Name", b"Name", "PeerPrivateKey", b"PeerPrivateKey", "PeerPublicKey", b"PeerPublicKey", "PeerPublicKeyDigest", b"PeerPublicKeyDigest", "PeerPublicKeySignature", b"PeerPublicKeySignature", "SHA1", b"SHA1", "SHA256", b"SHA256", "Stage", b"Stage", "WGImplantPrivKey", b"WGImplantPrivKey", "WGServerPubKey", b"WGServerPubKey"]) -> None: ...

@typing_extensions.final
class CompilerTarget(Message):
    DESCRIPTOR: Descriptor

    GOOS_FIELD_NUMBER: int
    GOARCH_FIELD_NUMBER: int
    FORMAT_FIELD_NUMBER: int
    GOOS: str
    """The server's OS"""
    GOARCH: str
    """The server's Arch"""
    Format: OutputFormat.ValueType
    def __init__(
        self,
        *,
        GOOS: str = ...,
        GOARCH: str = ...,
        Format: OutputFormat.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Format", b"Format", "GOARCH", b"GOARCH", "GOOS", b"GOOS"]) -> None: ...

@typing_extensions.final
class CrossCompiler(Message):
    DESCRIPTOR: Descriptor

    TARGETGOOS_FIELD_NUMBER: int
    TARGETGOARCH_FIELD_NUMBER: int
    CCPATH_FIELD_NUMBER: int
    CXXPATH_FIELD_NUMBER: int
    TargetGOOS: str
    """The server's OS"""
    TargetGOARCH: str
    """The server's Arch"""
    CCPath: str
    CXXPath: str
    def __init__(
        self,
        *,
        TargetGOOS: str = ...,
        TargetGOARCH: str = ...,
        CCPath: str = ...,
        CXXPath: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["CCPath", b"CCPath", "CXXPath", b"CXXPath", "TargetGOARCH", b"TargetGOARCH", "TargetGOOS", b"TargetGOOS"]) -> None: ...

@typing_extensions.final
class Compiler(Message):
    DESCRIPTOR: Descriptor

    GOOS_FIELD_NUMBER: int
    GOARCH_FIELD_NUMBER: int
    TARGETS_FIELD_NUMBER: int
    CROSSCOMPILERS_FIELD_NUMBER: int
    UNSUPPORTEDTARGETS_FIELD_NUMBER: int
    GOOS: str
    """The server's OS"""
    GOARCH: str
    """The server's Arch"""
    @property
    def Targets(self) -> RepeatedCompositeFieldContainer[CompilerTarget]: ...
    @property
    def CrossCompilers(self) -> RepeatedCompositeFieldContainer[CrossCompiler]: ...
    @property
    def UnsupportedTargets(self) -> RepeatedCompositeFieldContainer[CompilerTarget]: ...
    def __init__(
        self,
        *,
        GOOS: str = ...,
        GOARCH: str = ...,
        Targets: Iterable[CompilerTarget] | None = ...,
        CrossCompilers: Iterable[CrossCompiler] | None = ...,
        UnsupportedTargets: Iterable[CompilerTarget] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["CrossCompilers", b"CrossCompilers", "GOARCH", b"GOARCH", "GOOS", b"GOOS", "Targets", b"Targets", "UnsupportedTargets", b"UnsupportedTargets"]) -> None: ...

@typing_extensions.final
class DeleteReq(Message):
    DESCRIPTOR: Descriptor

    NAME_FIELD_NUMBER: int
    Name: str
    def __init__(
        self,
        *,
        Name: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Name", b"Name"]) -> None: ...

@typing_extensions.final
class DNSCanary(Message):
    """DNSCanary - Single canary and metadata"""

    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    IMPLANTNAME_FIELD_NUMBER: int
    DOMAIN_FIELD_NUMBER: int
    TRIGGERED_FIELD_NUMBER: int
    FIRSTTRIGGERED_FIELD_NUMBER: int
    LATESTTRIGGER_FIELD_NUMBER: int
    COUNT_FIELD_NUMBER: int
    ID: str
    ImplantName: str
    Domain: str
    Triggered: bool
    FirstTriggered: str
    LatestTrigger: str
    Count: int
    def __init__(
        self,
        *,
        ID: str = ...,
        ImplantName: str = ...,
        Domain: str = ...,
        Triggered: bool = ...,
        FirstTriggered: str = ...,
        LatestTrigger: str = ...,
        Count: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Count", b"Count", "Domain", b"Domain", "FirstTriggered", b"FirstTriggered", "ID", b"ID", "ImplantName", b"ImplantName", "LatestTrigger", b"LatestTrigger", "Triggered", b"Triggered"]) -> None: ...

@typing_extensions.final
class Canaries(Message):
    DESCRIPTOR: Descriptor

    CANARIES_FIELD_NUMBER: int
    @property
    def Canaries(self) -> RepeatedCompositeFieldContainer[DNSCanary]: ...
    def __init__(
        self,
        *,
        Canaries: Iterable[DNSCanary] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Canaries", b"Canaries"]) -> None: ...

@typing_extensions.final
class UniqueWGIP(Message):
    """UniqueWGIP - Unique wireguard IP"""

    DESCRIPTOR: Descriptor

    IP_FIELD_NUMBER: int
    IP: str
    def __init__(
        self,
        *,
        IP: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["IP", b"IP"]) -> None: ...

@typing_extensions.final
class ImplantProfile(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    CONFIG_FIELD_NUMBER: int
    ID: str
    Name: str
    @property
    def Config(self) -> ImplantConfig: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        Name: str = ...,
        Config: ImplantConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Config", b"Config"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Config", b"Config", "ID", b"ID", "Name", b"Name"]) -> None: ...

@typing_extensions.final
class ImplantProfiles(Message):
    DESCRIPTOR: Descriptor

    PROFILES_FIELD_NUMBER: int
    @property
    def Profiles(self) -> RepeatedCompositeFieldContainer[ImplantProfile]: ...
    def __init__(
        self,
        *,
        Profiles: Iterable[ImplantProfile] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Profiles", b"Profiles"]) -> None: ...

@typing_extensions.final
class RegenerateReq(Message):
    DESCRIPTOR: Descriptor

    IMPLANTNAME_FIELD_NUMBER: int
    ImplantName: str
    def __init__(
        self,
        *,
        ImplantName: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ImplantName", b"ImplantName"]) -> None: ...

@typing_extensions.final
class Job(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    DESCRIPTION_FIELD_NUMBER: int
    PROTOCOL_FIELD_NUMBER: int
    PORT_FIELD_NUMBER: int
    DOMAINS_FIELD_NUMBER: int
    PROFILENAME_FIELD_NUMBER: int
    ID: int
    Name: str
    Description: str
    Protocol: str
    Port: int
    @property
    def Domains(self) -> RepeatedScalarFieldContainer[str]: ...
    ProfileName: str
    def __init__(
        self,
        *,
        ID: int = ...,
        Name: str = ...,
        Description: str = ...,
        Protocol: str = ...,
        Port: int = ...,
        Domains: Iterable[str] | None = ...,
        ProfileName: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Description", b"Description", "Domains", b"Domains", "ID", b"ID", "Name", b"Name", "Port", b"Port", "ProfileName", b"ProfileName", "Protocol", b"Protocol"]) -> None: ...

@typing_extensions.final
class Jobs(Message):
    """[ Jobs ]  ----------------------------------------"""

    DESCRIPTOR: Descriptor

    ACTIVE_FIELD_NUMBER: int
    @property
    def Active(self) -> RepeatedCompositeFieldContainer[Job]: ...
    def __init__(
        self,
        *,
        Active: Iterable[Job] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Active", b"Active"]) -> None: ...

@typing_extensions.final
class KillJobReq(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    ID: int
    def __init__(
        self,
        *,
        ID: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ID", b"ID"]) -> None: ...

@typing_extensions.final
class RestartJobReq(Message):
    DESCRIPTOR: Descriptor

    JOBIDS_FIELD_NUMBER: int
    @property
    def JobIDs(self) -> RepeatedScalarFieldContainer[int]: ...
    def __init__(
        self,
        *,
        JobIDs: Iterable[int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["JobIDs", b"JobIDs"]) -> None: ...

@typing_extensions.final
class KillJob(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    SUCCESS_FIELD_NUMBER: int
    ID: int
    Success: bool
    def __init__(
        self,
        *,
        ID: int = ...,
        Success: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ID", b"ID", "Success", b"Success"]) -> None: ...

@typing_extensions.final
class ListenerJob(Message):
    """[ Listeners ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    JOBID_FIELD_NUMBER: int
    MTLSCONF_FIELD_NUMBER: int
    WGCONF_FIELD_NUMBER: int
    DNSCONF_FIELD_NUMBER: int
    HTTPCONF_FIELD_NUMBER: int
    MULTICONF_FIELD_NUMBER: int
    ID: str
    Type: str
    JobID: int
    @property
    def MTLSConf(self) -> MTLSListenerReq: ...
    @property
    def WGConf(self) -> WGListenerReq: ...
    @property
    def DNSConf(self) -> DNSListenerReq: ...
    @property
    def HTTPConf(self) -> HTTPListenerReq: ...
    @property
    def MultiConf(self) -> MultiplayerListenerReq: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        Type: str = ...,
        JobID: int = ...,
        MTLSConf: MTLSListenerReq | None = ...,
        WGConf: WGListenerReq | None = ...,
        DNSConf: DNSListenerReq | None = ...,
        HTTPConf: HTTPListenerReq | None = ...,
        MultiConf: MultiplayerListenerReq | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["DNSConf", b"DNSConf", "HTTPConf", b"HTTPConf", "MTLSConf", b"MTLSConf", "MultiConf", b"MultiConf", "WGConf", b"WGConf"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["DNSConf", b"DNSConf", "HTTPConf", b"HTTPConf", "ID", b"ID", "JobID", b"JobID", "MTLSConf", b"MTLSConf", "MultiConf", b"MultiConf", "Type", b"Type", "WGConf", b"WGConf"]) -> None: ...

@typing_extensions.final
class MultiplayerListenerReq(Message):
    DESCRIPTOR: Descriptor

    HOST_FIELD_NUMBER: int
    PORT_FIELD_NUMBER: int
    Host: str
    Port: int
    def __init__(
        self,
        *,
        Host: str = ...,
        Port: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Host", b"Host", "Port", b"Port"]) -> None: ...

@typing_extensions.final
class MTLSListenerReq(Message):
    DESCRIPTOR: Descriptor

    HOST_FIELD_NUMBER: int
    PORT_FIELD_NUMBER: int
    Host: str
    Port: int
    def __init__(
        self,
        *,
        Host: str = ...,
        Port: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Host", b"Host", "Port", b"Port"]) -> None: ...

@typing_extensions.final
class WGListenerReq(Message):
    DESCRIPTOR: Descriptor

    HOST_FIELD_NUMBER: int
    PORT_FIELD_NUMBER: int
    TUNIP_FIELD_NUMBER: int
    NPORT_FIELD_NUMBER: int
    KEYPORT_FIELD_NUMBER: int
    Host: str
    Port: int
    TunIP: str
    NPort: int
    KeyPort: int
    def __init__(
        self,
        *,
        Host: str = ...,
        Port: int = ...,
        TunIP: str = ...,
        NPort: int = ...,
        KeyPort: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Host", b"Host", "KeyPort", b"KeyPort", "NPort", b"NPort", "Port", b"Port", "TunIP", b"TunIP"]) -> None: ...

@typing_extensions.final
class DNSListenerReq(Message):
    DESCRIPTOR: Descriptor

    DOMAINS_FIELD_NUMBER: int
    CANARIES_FIELD_NUMBER: int
    HOST_FIELD_NUMBER: int
    PORT_FIELD_NUMBER: int
    ENFORCEOTP_FIELD_NUMBER: int
    @property
    def Domains(self) -> RepeatedScalarFieldContainer[str]: ...
    Canaries: bool
    Host: str
    Port: int
    EnforceOTP: bool
    def __init__(
        self,
        *,
        Domains: Iterable[str] | None = ...,
        Canaries: bool = ...,
        Host: str = ...,
        Port: int = ...,
        EnforceOTP: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Canaries", b"Canaries", "Domains", b"Domains", "EnforceOTP", b"EnforceOTP", "Host", b"Host", "Port", b"Port"]) -> None: ...

@typing_extensions.final
class HTTPListenerReq(Message):
    DESCRIPTOR: Descriptor

    DOMAIN_FIELD_NUMBER: int
    HOST_FIELD_NUMBER: int
    PORT_FIELD_NUMBER: int
    SECURE_FIELD_NUMBER: int
    WEBSITE_FIELD_NUMBER: int
    CERT_FIELD_NUMBER: int
    KEY_FIELD_NUMBER: int
    ACME_FIELD_NUMBER: int
    ENFORCEOTP_FIELD_NUMBER: int
    LONGPOLLTIMEOUT_FIELD_NUMBER: int
    LONGPOLLJITTER_FIELD_NUMBER: int
    RANDOMIZEJARM_FIELD_NUMBER: int
    Domain: str
    Host: str
    Port: int
    Secure: bool
    """Enable HTTPS"""
    Website: str
    Cert: bytes
    Key: bytes
    ACME: bool
    EnforceOTP: bool
    LongPollTimeout: int
    LongPollJitter: int
    RandomizeJARM: bool
    """Only valid with Secure = true"""
    def __init__(
        self,
        *,
        Domain: str = ...,
        Host: str = ...,
        Port: int = ...,
        Secure: bool = ...,
        Website: str = ...,
        Cert: bytes = ...,
        Key: bytes = ...,
        ACME: bool = ...,
        EnforceOTP: bool = ...,
        LongPollTimeout: int = ...,
        LongPollJitter: int = ...,
        RandomizeJARM: bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ACME", b"ACME", "Cert", b"Cert", "Domain", b"Domain", "EnforceOTP", b"EnforceOTP", "Host", b"Host", "Key", b"Key", "LongPollJitter", b"LongPollJitter", "LongPollTimeout", b"LongPollTimeout", "Port", b"Port", "RandomizeJARM", b"RandomizeJARM", "Secure", b"Secure", "Website", b"Website"]) -> None: ...

@typing_extensions.final
class NamedPipesReq(Message):
    """Named Pipes Messages for pivoting"""

    DESCRIPTOR: Descriptor

    PIPENAME_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    PipeName: str
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        PipeName: str = ...,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["PipeName", b"PipeName", "Request", b"Request"]) -> None: ...

@typing_extensions.final
class NamedPipes(Message):
    DESCRIPTOR: Descriptor

    SUCCESS_FIELD_NUMBER: int
    ERR_FIELD_NUMBER: int
    RESPONSE_FIELD_NUMBER: int
    Success: bool
    Err: str
    @property
    def Response(self) -> Response: ...
    def __init__(
        self,
        *,
        Success: bool = ...,
        Err: str = ...,
        Response: Response | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Response", b"Response"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Err", b"Err", "Response", b"Response", "Success", b"Success"]) -> None: ...

@typing_extensions.final
class TCPPivotReq(Message):
    """TCP Messages for pivoting"""

    DESCRIPTOR: Descriptor

    ADDRESS_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    Address: str
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        Address: str = ...,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Address", b"Address", "Request", b"Request"]) -> None: ...

@typing_extensions.final
class TCPPivot(Message):
    DESCRIPTOR: Descriptor

    SUCCESS_FIELD_NUMBER: int
    ERR_FIELD_NUMBER: int
    RESPONSE_FIELD_NUMBER: int
    Success: bool
    Err: str
    @property
    def Response(self) -> Response: ...
    def __init__(
        self,
        *,
        Success: bool = ...,
        Err: str = ...,
        Response: Response | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Response", b"Response"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Err", b"Err", "Response", b"Response", "Success", b"Success"]) -> None: ...

@typing_extensions.final
class Sessions(Message):
    """[ commands ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    SESSIONS_FIELD_NUMBER: int
    @property
    def Sessions(self) -> RepeatedCompositeFieldContainer[Session]: ...
    def __init__(
        self,
        *,
        Sessions: Iterable[Session] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Sessions", b"Sessions"]) -> None: ...

@typing_extensions.final
class RenameReq(Message):
    DESCRIPTOR: Descriptor

    SESSIONID_FIELD_NUMBER: int
    BEACONID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    SessionID: str
    BeaconID: str
    Name: str
    def __init__(
        self,
        *,
        SessionID: str = ...,
        BeaconID: str = ...,
        Name: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["BeaconID", b"BeaconID", "Name", b"Name", "SessionID", b"SessionID"]) -> None: ...

@typing_extensions.final
class GenerateReq(Message):
    DESCRIPTOR: Descriptor

    CONFIG_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    @property
    def Config(self) -> ImplantConfig: ...
    Name: str
    def __init__(
        self,
        *,
        Config: ImplantConfig | None = ...,
        Name: str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Config", b"Config"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Config", b"Config", "Name", b"Name"]) -> None: ...

@typing_extensions.final
class GenerateStageReq(Message):
    DESCRIPTOR: Descriptor

    PROFILE_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    AESENCRYPTKEY_FIELD_NUMBER: int
    AESENCRYPTIV_FIELD_NUMBER: int
    RC4ENCRYPTKEY_FIELD_NUMBER: int
    PREPENDSIZE_FIELD_NUMBER: int
    COMPRESSF_FIELD_NUMBER: int
    COMPRESS_FIELD_NUMBER: int
    Profile: str
    Name: str
    AESEncryptKey: str
    AESEncryptIv: str
    RC4EncryptKey: str
    PrependSize: bool
    CompressF: str
    Compress: str
    def __init__(
        self,
        *,
        Profile: str = ...,
        Name: str = ...,
        AESEncryptKey: str = ...,
        AESEncryptIv: str = ...,
        RC4EncryptKey: str = ...,
        PrependSize: bool = ...,
        CompressF: str = ...,
        Compress: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["AESEncryptIv", b"AESEncryptIv", "AESEncryptKey", b"AESEncryptKey", "Compress", b"Compress", "CompressF", b"CompressF", "Name", b"Name", "PrependSize", b"PrependSize", "Profile", b"Profile", "RC4EncryptKey", b"RC4EncryptKey"]) -> None: ...

@typing_extensions.final
class Generate(Message):
    DESCRIPTOR: Descriptor

    FILE_FIELD_NUMBER: int
    @property
    def File(self) -> File: ...
    def __init__(
        self,
        *,
        File: File | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["File", b"File"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["File", b"File"]) -> None: ...

@typing_extensions.final
class MSFReq(Message):
    DESCRIPTOR: Descriptor

    PAYLOAD_FIELD_NUMBER: int
    LHOST_FIELD_NUMBER: int
    LPORT_FIELD_NUMBER: int
    ENCODER_FIELD_NUMBER: int
    ITERATIONS_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    Payload: str
    LHost: str
    LPort: int
    Encoder: str
    Iterations: int
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        Payload: str = ...,
        LHost: str = ...,
        LPort: int = ...,
        Encoder: str = ...,
        Iterations: int = ...,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Encoder", b"Encoder", "Iterations", b"Iterations", "LHost", b"LHost", "LPort", b"LPort", "Payload", b"Payload", "Request", b"Request"]) -> None: ...

@typing_extensions.final
class MSFRemoteReq(Message):
    DESCRIPTOR: Descriptor

    PAYLOAD_FIELD_NUMBER: int
    LHOST_FIELD_NUMBER: int
    LPORT_FIELD_NUMBER: int
    ENCODER_FIELD_NUMBER: int
    ITERATIONS_FIELD_NUMBER: int
    PID_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    Payload: str
    LHost: str
    LPort: int
    Encoder: str
    Iterations: int
    PID: int
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        Payload: str = ...,
        LHost: str = ...,
        LPort: int = ...,
        Encoder: str = ...,
        Iterations: int = ...,
        PID: int = ...,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Encoder", b"Encoder", "Iterations", b"Iterations", "LHost", b"LHost", "LPort", b"LPort", "PID", b"PID", "Payload", b"Payload", "Request", b"Request"]) -> None: ...

@typing_extensions.final
class StagerListenerReq(Message):
    DESCRIPTOR: Descriptor

    PROTOCOL_FIELD_NUMBER: int
    HOST_FIELD_NUMBER: int
    PORT_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    CERT_FIELD_NUMBER: int
    KEY_FIELD_NUMBER: int
    ACME_FIELD_NUMBER: int
    PROFILENAME_FIELD_NUMBER: int
    Protocol: StageProtocol.ValueType
    Host: str
    Port: int
    Data: bytes
    Cert: bytes
    Key: bytes
    ACME: bool
    ProfileName: str
    def __init__(
        self,
        *,
        Protocol: StageProtocol.ValueType = ...,
        Host: str = ...,
        Port: int = ...,
        Data: bytes = ...,
        Cert: bytes = ...,
        Key: bytes = ...,
        ACME: bool = ...,
        ProfileName: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ACME", b"ACME", "Cert", b"Cert", "Data", b"Data", "Host", b"Host", "Key", b"Key", "Port", b"Port", "ProfileName", b"ProfileName", "Protocol", b"Protocol"]) -> None: ...

@typing_extensions.final
class StagerListener(Message):
    DESCRIPTOR: Descriptor

    JOBID_FIELD_NUMBER: int
    JobID: int
    def __init__(
        self,
        *,
        JobID: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["JobID", b"JobID"]) -> None: ...

@typing_extensions.final
class ShellcodeRDIReq(Message):
    DESCRIPTOR: Descriptor

    DATA_FIELD_NUMBER: int
    FUNCTIONNAME_FIELD_NUMBER: int
    ARGUMENTS_FIELD_NUMBER: int
    Data: bytes
    FunctionName: str
    Arguments: str
    def __init__(
        self,
        *,
        Data: bytes = ...,
        FunctionName: str = ...,
        Arguments: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Arguments", b"Arguments", "Data", b"Data", "FunctionName", b"FunctionName"]) -> None: ...

@typing_extensions.final
class ShellcodeRDI(Message):
    DESCRIPTOR: Descriptor

    DATA_FIELD_NUMBER: int
    Data: bytes
    def __init__(
        self,
        *,
        Data: bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Data", b"Data"]) -> None: ...

@typing_extensions.final
class MsfStagerReq(Message):
    DESCRIPTOR: Descriptor

    ARCH_FIELD_NUMBER: int
    FORMAT_FIELD_NUMBER: int
    PORT_FIELD_NUMBER: int
    HOST_FIELD_NUMBER: int
    OS_FIELD_NUMBER: int
    PROTOCOL_FIELD_NUMBER: int
    BADCHARS_FIELD_NUMBER: int
    ADVOPTIONS_FIELD_NUMBER: int
    HTTPC2CONFIGNAME_FIELD_NUMBER: int
    Arch: str
    Format: str
    Port: int
    Host: str
    OS: str
    """reserved for future usage"""
    Protocol: StageProtocol.ValueType
    @property
    def BadChars(self) -> RepeatedScalarFieldContainer[str]: ...
    AdvOptions: str
    HTTPC2ConfigName: str
    def __init__(
        self,
        *,
        Arch: str = ...,
        Format: str = ...,
        Port: int = ...,
        Host: str = ...,
        OS: str = ...,
        Protocol: StageProtocol.ValueType = ...,
        BadChars: Iterable[str] | None = ...,
        AdvOptions: str = ...,
        HTTPC2ConfigName: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["AdvOptions", b"AdvOptions", "Arch", b"Arch", "BadChars", b"BadChars", "Format", b"Format", "HTTPC2ConfigName", b"HTTPC2ConfigName", "Host", b"Host", "OS", b"OS", "Port", b"Port", "Protocol", b"Protocol"]) -> None: ...

@typing_extensions.final
class MsfStager(Message):
    DESCRIPTOR: Descriptor

    FILE_FIELD_NUMBER: int
    @property
    def File(self) -> File: ...
    def __init__(
        self,
        *,
        File: File | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["File", b"File"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["File", b"File"]) -> None: ...

@typing_extensions.final
class GetSystemReq(Message):
    """GetSystemReq - Client request to the server which is translated into
                   InvokeSystemReq when sending to the implant.
    """

    DESCRIPTOR: Descriptor

    HOSTINGPROCESS_FIELD_NUMBER: int
    CONFIG_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    HostingProcess: str
    @property
    def Config(self) -> ImplantConfig: ...
    Name: str
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        HostingProcess: str = ...,
        Config: ImplantConfig | None = ...,
        Name: str = ...,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Config", b"Config", "Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Config", b"Config", "HostingProcess", b"HostingProcess", "Name", b"Name", "Request", b"Request"]) -> None: ...

@typing_extensions.final
class MigrateReq(Message):
    """MigrateReq - Client request to the server which is translated into
                 InvokeMigrateReq when sending to the implant.
    """

    DESCRIPTOR: Descriptor

    PID_FIELD_NUMBER: int
    CONFIG_FIELD_NUMBER: int
    ENCODER_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    PROCNAME_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    Pid: int
    @property
    def Config(self) -> ImplantConfig: ...
    Encoder: ShellcodeEncoder.ValueType
    Name: str
    ProcName: str
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        Pid: int = ...,
        Config: ImplantConfig | None = ...,
        Encoder: ShellcodeEncoder.ValueType = ...,
        Name: str = ...,
        ProcName: str = ...,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Config", b"Config", "Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Config", b"Config", "Encoder", b"Encoder", "Name", b"Name", "Pid", b"Pid", "ProcName", b"ProcName", "Request", b"Request"]) -> None: ...

@typing_extensions.final
class CreateTunnelReq(Message):
    """[ Tunnels ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    REQUEST_FIELD_NUMBER: int
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Request", b"Request"]) -> None: ...

@typing_extensions.final
class CreateTunnel(Message):
    DESCRIPTOR: Descriptor

    SESSIONID_FIELD_NUMBER: int
    TUNNELID_FIELD_NUMBER: int
    SessionID: int
    TunnelID: int
    def __init__(
        self,
        *,
        SessionID: int = ...,
        TunnelID: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["SessionID", b"SessionID", "TunnelID", b"TunnelID"]) -> None: ...

@typing_extensions.final
class CloseTunnelReq(Message):
    DESCRIPTOR: Descriptor

    TUNNELID_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    TunnelID: int
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        TunnelID: int = ...,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Request", b"Request", "TunnelID", b"TunnelID"]) -> None: ...

@typing_extensions.final
class PivotGraphEntry(Message):
    """[ Pivots ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    PEERID_FIELD_NUMBER: int
    SESSION_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    CHILDREN_FIELD_NUMBER: int
    PeerID: int
    @property
    def Session(self) -> Session: ...
    Name: str
    @property
    def Children(self) -> RepeatedCompositeFieldContainer[PivotGraphEntry]: ...
    def __init__(
        self,
        *,
        PeerID: int = ...,
        Session: Session | None = ...,
        Name: str = ...,
        Children: Iterable[PivotGraphEntry] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Session", b"Session"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Children", b"Children", "Name", b"Name", "PeerID", b"PeerID", "Session", b"Session"]) -> None: ...

@typing_extensions.final
class PivotGraph(Message):
    DESCRIPTOR: Descriptor

    CHILDREN_FIELD_NUMBER: int
    @property
    def Children(self) -> RepeatedCompositeFieldContainer[PivotGraphEntry]: ...
    def __init__(
        self,
        *,
        Children: Iterable[PivotGraphEntry] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Children", b"Children"]) -> None: ...

@typing_extensions.final
class Client(Message):
    """[ Events ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    OPERATOR_FIELD_NUMBER: int
    ID: int
    Name: str
    @property
    def Operator(self) -> Operator: ...
    def __init__(
        self,
        *,
        ID: int = ...,
        Name: str = ...,
        Operator: Operator | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Operator", b"Operator"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["ID", b"ID", "Name", b"Name", "Operator", b"Operator"]) -> None: ...

@typing_extensions.final
class Event(Message):
    DESCRIPTOR: Descriptor

    EVENTTYPE_FIELD_NUMBER: int
    SESSION_FIELD_NUMBER: int
    JOB_FIELD_NUMBER: int
    CLIENT_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    ERR_FIELD_NUMBER: int
    EventType: str
    @property
    def Session(self) -> Session: ...
    @property
    def Job(self) -> Job: ...
    @property
    def Client(self) -> Client: ...
    Data: bytes
    Err: str
    """Can't trigger normal gRPC error"""
    def __init__(
        self,
        *,
        EventType: str = ...,
        Session: Session | None = ...,
        Job: Job | None = ...,
        Client: Client | None = ...,
        Data: bytes = ...,
        Err: str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Client", b"Client", "Job", b"Job", "Session", b"Session"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Client", b"Client", "Data", b"Data", "Err", b"Err", "EventType", b"EventType", "Job", b"Job", "Session", b"Session"]) -> None: ...

@typing_extensions.final
class Operators(Message):
    DESCRIPTOR: Descriptor

    OPERATORS_FIELD_NUMBER: int
    @property
    def Operators(self) -> RepeatedCompositeFieldContainer[Operator]: ...
    def __init__(
        self,
        *,
        Operators: Iterable[Operator] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Operators", b"Operators"]) -> None: ...

@typing_extensions.final
class Operator(Message):
    DESCRIPTOR: Descriptor

    ONLINE_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    Online: bool
    Name: str
    def __init__(
        self,
        *,
        Online: bool = ...,
        Name: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Name", b"Name", "Online", b"Online"]) -> None: ...

@typing_extensions.final
class WebContent(Message):
    """[ Websites ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    WEBSITEID_FIELD_NUMBER: int
    PATH_FIELD_NUMBER: int
    CONTENTTYPE_FIELD_NUMBER: int
    SIZE_FIELD_NUMBER: int
    CONTENT_FIELD_NUMBER: int
    ID: str
    WebsiteID: str
    Path: str
    ContentType: str
    Size: int
    Content: bytes
    def __init__(
        self,
        *,
        ID: str = ...,
        WebsiteID: str = ...,
        Path: str = ...,
        ContentType: str = ...,
        Size: int = ...,
        Content: bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Content", b"Content", "ContentType", b"ContentType", "ID", b"ID", "Path", b"Path", "Size", b"Size", "WebsiteID", b"WebsiteID"]) -> None: ...

@typing_extensions.final
class WebsiteAddContent(Message):
    DESCRIPTOR: Descriptor

    @typing_extensions.final
    class ContentsEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        @property
        def value(self) -> WebContent: ...
        def __init__(
            self,
            *,
            key: str = ...,
            value: WebContent | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: int
    CONTENTS_FIELD_NUMBER: int
    Name: str
    @property
    def Contents(self) -> MessageMap[str, WebContent]: ...
    def __init__(
        self,
        *,
        Name: str = ...,
        Contents: Mapping[str, WebContent] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Contents", b"Contents", "Name", b"Name"]) -> None: ...

@typing_extensions.final
class WebsiteRemoveContent(Message):
    DESCRIPTOR: Descriptor

    NAME_FIELD_NUMBER: int
    PATHS_FIELD_NUMBER: int
    Name: str
    @property
    def Paths(self) -> RepeatedScalarFieldContainer[str]: ...
    def __init__(
        self,
        *,
        Name: str = ...,
        Paths: Iterable[str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Name", b"Name", "Paths", b"Paths"]) -> None: ...

@typing_extensions.final
class Website(Message):
    DESCRIPTOR: Descriptor

    @typing_extensions.final
    class ContentsEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        @property
        def value(self) -> WebContent: ...
        def __init__(
            self,
            *,
            key: str = ...,
            value: WebContent | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    CONTENTS_FIELD_NUMBER: int
    ID: str
    Name: str
    @property
    def Contents(self) -> MessageMap[str, WebContent]: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        Name: str = ...,
        Contents: Mapping[str, WebContent] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Contents", b"Contents", "ID", b"ID", "Name", b"Name"]) -> None: ...

@typing_extensions.final
class Websites(Message):
    DESCRIPTOR: Descriptor

    WEBSITES_FIELD_NUMBER: int
    @property
    def Websites(self) -> RepeatedCompositeFieldContainer[Website]: ...
    def __init__(
        self,
        *,
        Websites: Iterable[Website] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Websites", b"Websites"]) -> None: ...

@typing_extensions.final
class WGClientConfig(Message):
    """[ Wireguard ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    SERVERPUBKEY_FIELD_NUMBER: int
    CLIENTPRIVATEKEY_FIELD_NUMBER: int
    CLIENTPUBKEY_FIELD_NUMBER: int
    CLIENTIP_FIELD_NUMBER: int
    ServerPubKey: str
    ClientPrivateKey: str
    ClientPubKey: str
    ClientIP: str
    def __init__(
        self,
        *,
        ServerPubKey: str = ...,
        ClientPrivateKey: str = ...,
        ClientPubKey: str = ...,
        ClientIP: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ClientIP", b"ClientIP", "ClientPrivateKey", b"ClientPrivateKey", "ClientPubKey", b"ClientPubKey", "ServerPubKey", b"ServerPubKey"]) -> None: ...

@typing_extensions.final
class Loot(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    FILETYPE_FIELD_NUMBER: int
    ORIGINHOSTUUID_FIELD_NUMBER: int
    SIZE_FIELD_NUMBER: int
    FILE_FIELD_NUMBER: int
    ID: str
    Name: str
    FileType: FileType.ValueType
    OriginHostUUID: str
    Size: int
    @property
    def File(self) -> File: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        Name: str = ...,
        FileType: FileType.ValueType = ...,
        OriginHostUUID: str = ...,
        Size: int = ...,
        File: File | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["File", b"File"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["File", b"File", "FileType", b"FileType", "ID", b"ID", "Name", b"Name", "OriginHostUUID", b"OriginHostUUID", "Size", b"Size"]) -> None: ...

@typing_extensions.final
class AllLoot(Message):
    DESCRIPTOR: Descriptor

    LOOT_FIELD_NUMBER: int
    @property
    def Loot(self) -> RepeatedCompositeFieldContainer[Loot]: ...
    def __init__(
        self,
        *,
        Loot: Iterable[Loot] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Loot", b"Loot"]) -> None: ...

@typing_extensions.final
class IOC(Message):
    """[ Hosts ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    PATH_FIELD_NUMBER: int
    FILEHASH_FIELD_NUMBER: int
    ID_FIELD_NUMBER: int
    Path: str
    FileHash: str
    ID: str
    def __init__(
        self,
        *,
        Path: str = ...,
        FileHash: str = ...,
        ID: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["FileHash", b"FileHash", "ID", b"ID", "Path", b"Path"]) -> None: ...

@typing_extensions.final
class ExtensionData(Message):
    DESCRIPTOR: Descriptor

    OUTPUT_FIELD_NUMBER: int
    Output: str
    def __init__(
        self,
        *,
        Output: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Output", b"Output"]) -> None: ...

@typing_extensions.final
class Host(Message):
    DESCRIPTOR: Descriptor

    @typing_extensions.final
    class ExtensionDataEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        @property
        def value(self) -> ExtensionData: ...
        def __init__(
            self,
            *,
            key: str = ...,
            value: ExtensionData | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    ID_FIELD_NUMBER: int
    HOSTNAME_FIELD_NUMBER: int
    HOSTUUID_FIELD_NUMBER: int
    OSVERSION_FIELD_NUMBER: int
    IOCS_FIELD_NUMBER: int
    EXTENSIONDATA_FIELD_NUMBER: int
    LOCALE_FIELD_NUMBER: int
    FIRSTCONTACT_FIELD_NUMBER: int
    ID: str
    Hostname: str
    HostUUID: str
    OSVersion: str
    @property
    def IOCs(self) -> RepeatedCompositeFieldContainer[IOC]: ...
    @property
    def ExtensionData(self) -> MessageMap[str, ExtensionData]: ...
    Locale: str
    FirstContact: int
    def __init__(
        self,
        *,
        ID: str = ...,
        Hostname: str = ...,
        HostUUID: str = ...,
        OSVersion: str = ...,
        IOCs: Iterable[IOC] | None = ...,
        ExtensionData: Mapping[str, ExtensionData] | None = ...,
        Locale: str = ...,
        FirstContact: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ExtensionData", b"ExtensionData", "FirstContact", b"FirstContact", "HostUUID", b"HostUUID", "Hostname", b"Hostname", "ID", b"ID", "IOCs", b"IOCs", "Locale", b"Locale", "OSVersion", b"OSVersion"]) -> None: ...

@typing_extensions.final
class AllHosts(Message):
    DESCRIPTOR: Descriptor

    HOSTS_FIELD_NUMBER: int
    @property
    def Hosts(self) -> RepeatedCompositeFieldContainer[Host]: ...
    def __init__(
        self,
        *,
        Hosts: Iterable[Host] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Hosts", b"Hosts"]) -> None: ...

@typing_extensions.final
class DllHijackReq(Message):
    """[ Dll Hijack ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    REFERENCEDLLPATH_FIELD_NUMBER: int
    TARGETLOCATION_FIELD_NUMBER: int
    REFERENCEDLL_FIELD_NUMBER: int
    TARGETDLL_FIELD_NUMBER: int
    PROFILENAME_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    ReferenceDLLPath: str
    TargetLocation: str
    ReferenceDLL: bytes
    TargetDLL: bytes
    ProfileName: str
    Name: str
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        ReferenceDLLPath: str = ...,
        TargetLocation: str = ...,
        ReferenceDLL: bytes = ...,
        TargetDLL: bytes = ...,
        ProfileName: str = ...,
        Name: str = ...,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Name", b"Name", "ProfileName", b"ProfileName", "ReferenceDLL", b"ReferenceDLL", "ReferenceDLLPath", b"ReferenceDLLPath", "Request", b"Request", "TargetDLL", b"TargetDLL", "TargetLocation", b"TargetLocation"]) -> None: ...

@typing_extensions.final
class DllHijack(Message):
    DESCRIPTOR: Descriptor

    RESPONSE_FIELD_NUMBER: int
    @property
    def Response(self) -> Response: ...
    def __init__(
        self,
        *,
        Response: Response | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Response", b"Response"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Response", b"Response"]) -> None: ...

@typing_extensions.final
class BackdoorReq(Message):
    DESCRIPTOR: Descriptor

    FILEPATH_FIELD_NUMBER: int
    PROFILENAME_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    FilePath: str
    ProfileName: str
    Name: str
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        FilePath: str = ...,
        ProfileName: str = ...,
        Name: str = ...,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["FilePath", b"FilePath", "Name", b"Name", "ProfileName", b"ProfileName", "Request", b"Request"]) -> None: ...

@typing_extensions.final
class Backdoor(Message):
    DESCRIPTOR: Descriptor

    RESPONSE_FIELD_NUMBER: int
    @property
    def Response(self) -> Response: ...
    def __init__(
        self,
        *,
        Response: Response | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Response", b"Response"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Response", b"Response"]) -> None: ...

@typing_extensions.final
class ShellcodeEncodeReq(Message):
    DESCRIPTOR: Descriptor

    ENCODER_FIELD_NUMBER: int
    ARCHITECTURE_FIELD_NUMBER: int
    ITERATIONS_FIELD_NUMBER: int
    BADCHARS_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    REQUEST_FIELD_NUMBER: int
    Encoder: ShellcodeEncoder.ValueType
    Architecture: str
    Iterations: int
    BadChars: bytes
    Data: bytes
    @property
    def Request(self) -> Request: ...
    def __init__(
        self,
        *,
        Encoder: ShellcodeEncoder.ValueType = ...,
        Architecture: str = ...,
        Iterations: int = ...,
        BadChars: bytes = ...,
        Data: bytes = ...,
        Request: Request | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Request", b"Request"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Architecture", b"Architecture", "BadChars", b"BadChars", "Data", b"Data", "Encoder", b"Encoder", "Iterations", b"Iterations", "Request", b"Request"]) -> None: ...

@typing_extensions.final
class ShellcodeEncode(Message):
    DESCRIPTOR: Descriptor

    DATA_FIELD_NUMBER: int
    RESPONSE_FIELD_NUMBER: int
    Data: bytes
    @property
    def Response(self) -> Response: ...
    def __init__(
        self,
        *,
        Data: bytes = ...,
        Response: Response | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Response", b"Response"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Data", b"Data", "Response", b"Response"]) -> None: ...

@typing_extensions.final
class ShellcodeEncoderMap(Message):
    DESCRIPTOR: Descriptor

    @typing_extensions.final
    class EncodersEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: ShellcodeEncoder.ValueType
        def __init__(
            self,
            *,
            key: str = ...,
            value: ShellcodeEncoder.ValueType = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    ENCODERS_FIELD_NUMBER: int
    @property
    def Encoders(self) -> ScalarMap[str, ShellcodeEncoder.ValueType]: ...
    def __init__(
        self,
        *,
        Encoders: Mapping[str, ShellcodeEncoder.ValueType] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Encoders", b"Encoders"]) -> None: ...

@typing_extensions.final
class ExternalGenerateReq(Message):
    """[ Builder ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    CONFIG_FIELD_NUMBER: int
    BUILDERNAME_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    @property
    def Config(self) -> ImplantConfig: ...
    BuilderName: str
    Name: str
    def __init__(
        self,
        *,
        Config: ImplantConfig | None = ...,
        BuilderName: str = ...,
        Name: str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Config", b"Config"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["BuilderName", b"BuilderName", "Config", b"Config", "Name", b"Name"]) -> None: ...

@typing_extensions.final
class Builders(Message):
    DESCRIPTOR: Descriptor

    BUILDERS_FIELD_NUMBER: int
    @property
    def Builders(self) -> RepeatedCompositeFieldContainer[Builder]: ...
    def __init__(
        self,
        *,
        Builders: Iterable[Builder] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Builders", b"Builders"]) -> None: ...

@typing_extensions.final
class Builder(Message):
    DESCRIPTOR: Descriptor

    NAME_FIELD_NUMBER: int
    OPERATORNAME_FIELD_NUMBER: int
    GOOS_FIELD_NUMBER: int
    GOARCH_FIELD_NUMBER: int
    TEMPLATES_FIELD_NUMBER: int
    TARGETS_FIELD_NUMBER: int
    CROSSCOMPILERS_FIELD_NUMBER: int
    Name: str
    OperatorName: str
    GOOS: str
    """The builder's OS"""
    GOARCH: str
    """The builder's Arch"""
    @property
    def Templates(self) -> RepeatedScalarFieldContainer[str]: ...
    @property
    def Targets(self) -> RepeatedCompositeFieldContainer[CompilerTarget]: ...
    @property
    def CrossCompilers(self) -> RepeatedCompositeFieldContainer[CrossCompiler]: ...
    def __init__(
        self,
        *,
        Name: str = ...,
        OperatorName: str = ...,
        GOOS: str = ...,
        GOARCH: str = ...,
        Templates: Iterable[str] | None = ...,
        Targets: Iterable[CompilerTarget] | None = ...,
        CrossCompilers: Iterable[CrossCompiler] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["CrossCompilers", b"CrossCompilers", "GOARCH", b"GOARCH", "GOOS", b"GOOS", "Name", b"Name", "OperatorName", b"OperatorName", "Targets", b"Targets", "Templates", b"Templates"]) -> None: ...

@typing_extensions.final
class HTTPC2Configs(Message):
    """[ HTTP C2 ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    CONFIGS_FIELD_NUMBER: int
    @property
    def configs(self) -> RepeatedCompositeFieldContainer[HTTPC2Config]: ...
    def __init__(
        self,
        *,
        configs: Iterable[HTTPC2Config] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["configs", b"configs"]) -> None: ...

@typing_extensions.final
class C2ProfileReq(Message):
    DESCRIPTOR: Descriptor

    NAME_FIELD_NUMBER: int
    Name: str
    def __init__(
        self,
        *,
        Name: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Name", b"Name"]) -> None: ...

@typing_extensions.final
class HTTPC2ConfigReq(Message):
    DESCRIPTOR: Descriptor

    OVERWRITE_FIELD_NUMBER: int
    C2CONFIG_FIELD_NUMBER: int
    overwrite: bool
    @property
    def C2Config(self) -> HTTPC2Config: ...
    def __init__(
        self,
        *,
        overwrite: bool = ...,
        C2Config: HTTPC2Config | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["C2Config", b"C2Config"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["C2Config", b"C2Config", "overwrite", b"overwrite"]) -> None: ...

@typing_extensions.final
class HTTPC2Config(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    CREATED_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    SERVERCONFIG_FIELD_NUMBER: int
    IMPLANTCONFIG_FIELD_NUMBER: int
    ID: str
    Created: int
    Name: str
    @property
    def ServerConfig(self) -> HTTPC2ServerConfig: ...
    @property
    def ImplantConfig(self) -> HTTPC2ImplantConfig: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        Created: int = ...,
        Name: str = ...,
        ServerConfig: HTTPC2ServerConfig | None = ...,
        ImplantConfig: HTTPC2ImplantConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["ImplantConfig", b"ImplantConfig", "ServerConfig", b"ServerConfig"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Created", b"Created", "ID", b"ID", "ImplantConfig", b"ImplantConfig", "Name", b"Name", "ServerConfig", b"ServerConfig"]) -> None: ...

@typing_extensions.final
class HTTPC2ServerConfig(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    RANDOMVERSIONHEADERS_FIELD_NUMBER: int
    HEADERS_FIELD_NUMBER: int
    COOKIES_FIELD_NUMBER: int
    ID: str
    RandomVersionHeaders: bool
    @property
    def Headers(self) -> RepeatedCompositeFieldContainer[HTTPC2Header]: ...
    @property
    def Cookies(self) -> RepeatedCompositeFieldContainer[HTTPC2Cookie]: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        RandomVersionHeaders: bool = ...,
        Headers: Iterable[HTTPC2Header] | None = ...,
        Cookies: Iterable[HTTPC2Cookie] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Cookies", b"Cookies", "Headers", b"Headers", "ID", b"ID", "RandomVersionHeaders", b"RandomVersionHeaders"]) -> None: ...

@typing_extensions.final
class HTTPC2ImplantConfig(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    USERAGENT_FIELD_NUMBER: int
    CHROMEBASEVERSION_FIELD_NUMBER: int
    MACOSVERSION_FIELD_NUMBER: int
    NONCEQUERYARGCHARS_FIELD_NUMBER: int
    EXTRAURLPARAMETERS_FIELD_NUMBER: int
    HEADERS_FIELD_NUMBER: int
    MAXFILES_FIELD_NUMBER: int
    MINFILES_FIELD_NUMBER: int
    MAXPATHS_FIELD_NUMBER: int
    MINPATHS_FIELD_NUMBER: int
    STAGERFILEEXTENSION_FIELD_NUMBER: int
    POLLFILEEXTENSION_FIELD_NUMBER: int
    STARTSESSIONFILEEXTENSION_FIELD_NUMBER: int
    SESSIONFILEEXTENSION_FIELD_NUMBER: int
    CLOSEFILEEXTENSION_FIELD_NUMBER: int
    PATHSEGMENTS_FIELD_NUMBER: int
    ID: str
    UserAgent: str
    ChromeBaseVersion: int
    MacOSVersion: str
    NonceQueryArgChars: str
    @property
    def ExtraURLParameters(self) -> RepeatedCompositeFieldContainer[HTTPC2URLParameter]: ...
    @property
    def Headers(self) -> RepeatedCompositeFieldContainer[HTTPC2Header]: ...
    MaxFiles: int
    MinFiles: int
    MaxPaths: int
    MinPaths: int
    StagerFileExtension: str
    PollFileExtension: str
    StartSessionFileExtension: str
    SessionFileExtension: str
    CloseFileExtension: str
    @property
    def PathSegments(self) -> RepeatedCompositeFieldContainer[HTTPC2PathSegment]: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        UserAgent: str = ...,
        ChromeBaseVersion: int = ...,
        MacOSVersion: str = ...,
        NonceQueryArgChars: str = ...,
        ExtraURLParameters: Iterable[HTTPC2URLParameter] | None = ...,
        Headers: Iterable[HTTPC2Header] | None = ...,
        MaxFiles: int = ...,
        MinFiles: int = ...,
        MaxPaths: int = ...,
        MinPaths: int = ...,
        StagerFileExtension: str = ...,
        PollFileExtension: str = ...,
        StartSessionFileExtension: str = ...,
        SessionFileExtension: str = ...,
        CloseFileExtension: str = ...,
        PathSegments: Iterable[HTTPC2PathSegment] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ChromeBaseVersion", b"ChromeBaseVersion", "CloseFileExtension", b"CloseFileExtension", "ExtraURLParameters", b"ExtraURLParameters", "Headers", b"Headers", "ID", b"ID", "MacOSVersion", b"MacOSVersion", "MaxFiles", b"MaxFiles", "MaxPaths", b"MaxPaths", "MinFiles", b"MinFiles", "MinPaths", b"MinPaths", "NonceQueryArgChars", b"NonceQueryArgChars", "PathSegments", b"PathSegments", "PollFileExtension", b"PollFileExtension", "SessionFileExtension", b"SessionFileExtension", "StagerFileExtension", b"StagerFileExtension", "StartSessionFileExtension", b"StartSessionFileExtension", "UserAgent", b"UserAgent"]) -> None: ...

@typing_extensions.final
class HTTPC2Cookie(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    ID: str
    Name: str
    def __init__(
        self,
        *,
        ID: str = ...,
        Name: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ID", b"ID", "Name", b"Name"]) -> None: ...

@typing_extensions.final
class HTTPC2Header(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    METHOD_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    VALUE_FIELD_NUMBER: int
    PROBABILITY_FIELD_NUMBER: int
    ID: str
    Method: str
    Name: str
    Value: str
    Probability: int
    def __init__(
        self,
        *,
        ID: str = ...,
        Method: str = ...,
        Name: str = ...,
        Value: str = ...,
        Probability: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ID", b"ID", "Method", b"Method", "Name", b"Name", "Probability", b"Probability", "Value", b"Value"]) -> None: ...

@typing_extensions.final
class HTTPC2URLParameter(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    METHOD_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    VALUE_FIELD_NUMBER: int
    PROBABILITY_FIELD_NUMBER: int
    ID: str
    Method: str
    Name: str
    Value: str
    Probability: int
    def __init__(
        self,
        *,
        ID: str = ...,
        Method: str = ...,
        Name: str = ...,
        Value: str = ...,
        Probability: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ID", b"ID", "Method", b"Method", "Name", b"Name", "Probability", b"Probability", "Value", b"Value"]) -> None: ...

@typing_extensions.final
class HTTPC2PathSegment(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    ISFILE_FIELD_NUMBER: int
    SEGMENTTYPE_FIELD_NUMBER: int
    VALUE_FIELD_NUMBER: int
    ID: str
    IsFile: bool
    SegmentType: HTTPC2SegmentType.ValueType
    Value: str
    def __init__(
        self,
        *,
        ID: str = ...,
        IsFile: bool = ...,
        SegmentType: HTTPC2SegmentType.ValueType = ...,
        Value: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ID", b"ID", "IsFile", b"IsFile", "SegmentType", b"SegmentType", "Value", b"Value"]) -> None: ...

@typing_extensions.final
class Credential(Message):
    """[ Credentials ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    USERNAME_FIELD_NUMBER: int
    PLAINTEXT_FIELD_NUMBER: int
    HASH_FIELD_NUMBER: int
    HASHTYPE_FIELD_NUMBER: int
    ISCRACKED_FIELD_NUMBER: int
    ORIGINHOSTUUID_FIELD_NUMBER: int
    COLLECTION_FIELD_NUMBER: int
    ID: str
    Username: str
    Plaintext: str
    Hash: str
    HashType: HashType.ValueType
    IsCracked: bool
    OriginHostUUID: str
    Collection: str
    def __init__(
        self,
        *,
        ID: str = ...,
        Username: str = ...,
        Plaintext: str = ...,
        Hash: str = ...,
        HashType: HashType.ValueType = ...,
        IsCracked: bool = ...,
        OriginHostUUID: str = ...,
        Collection: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Collection", b"Collection", "Hash", b"Hash", "HashType", b"HashType", "ID", b"ID", "IsCracked", b"IsCracked", "OriginHostUUID", b"OriginHostUUID", "Plaintext", b"Plaintext", "Username", b"Username"]) -> None: ...

@typing_extensions.final
class Credentials(Message):
    DESCRIPTOR: Descriptor

    CREDENTIALS_FIELD_NUMBER: int
    @property
    def Credentials(self) -> RepeatedCompositeFieldContainer[Credential]: ...
    def __init__(
        self,
        *,
        Credentials: Iterable[Credential] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Credentials", b"Credentials"]) -> None: ...

@typing_extensions.final
class Crackstations(Message):
    """[ Crackstation ] ----------------------------------------"""

    DESCRIPTOR: Descriptor

    CRACKSTATIONS_FIELD_NUMBER: int
    @property
    def Crackstations(self) -> RepeatedCompositeFieldContainer[Crackstation]: ...
    def __init__(
        self,
        *,
        Crackstations: Iterable[Crackstation] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Crackstations", b"Crackstations"]) -> None: ...

@typing_extensions.final
class CrackstationStatus(Message):
    DESCRIPTOR: Descriptor

    NAME_FIELD_NUMBER: int
    HOSTUUID_FIELD_NUMBER: int
    STATE_FIELD_NUMBER: int
    CURRENTCRACKJOBID_FIELD_NUMBER: int
    ISSYNCING_FIELD_NUMBER: int
    SYNCING_FIELD_NUMBER: int
    Name: str
    HostUUID: str
    State: States.ValueType
    CurrentCrackJobID: str
    IsSyncing: bool
    @property
    def Syncing(self) -> CrackSyncStatus: ...
    def __init__(
        self,
        *,
        Name: str = ...,
        HostUUID: str = ...,
        State: States.ValueType = ...,
        CurrentCrackJobID: str = ...,
        IsSyncing: bool = ...,
        Syncing: CrackSyncStatus | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Syncing", b"Syncing"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["CurrentCrackJobID", b"CurrentCrackJobID", "HostUUID", b"HostUUID", "IsSyncing", b"IsSyncing", "Name", b"Name", "State", b"State", "Syncing", b"Syncing"]) -> None: ...

@typing_extensions.final
class CrackSyncStatus(Message):
    DESCRIPTOR: Descriptor

    @typing_extensions.final
    class ProgressEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: str
        value: float
        def __init__(
            self,
            *,
            key: str = ...,
            value: float = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    SPEED_FIELD_NUMBER: int
    PROGRESS_FIELD_NUMBER: int
    Speed: float
    @property
    def Progress(self) -> ScalarMap[str, float]: ...
    def __init__(
        self,
        *,
        Speed: float = ...,
        Progress: Mapping[str, float] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Progress", b"Progress", "Speed", b"Speed"]) -> None: ...

@typing_extensions.final
class CrackBenchmark(Message):
    DESCRIPTOR: Descriptor

    @typing_extensions.final
    class BenchmarksEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: int
        value: int
        def __init__(
            self,
            *,
            key: int = ...,
            value: int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    NAME_FIELD_NUMBER: int
    HOSTUUID_FIELD_NUMBER: int
    BENCHMARKS_FIELD_NUMBER: int
    Name: str
    HostUUID: str
    @property
    def Benchmarks(self) -> ScalarMap[int, int]: ...
    def __init__(
        self,
        *,
        Name: str = ...,
        HostUUID: str = ...,
        Benchmarks: Mapping[int, int] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Benchmarks", b"Benchmarks", "HostUUID", b"HostUUID", "Name", b"Name"]) -> None: ...

@typing_extensions.final
class CrackTask(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    HOSTUUID_FIELD_NUMBER: int
    CREATEDAT_FIELD_NUMBER: int
    STARTEDAT_FIELD_NUMBER: int
    COMPLETEDAT_FIELD_NUMBER: int
    ERR_FIELD_NUMBER: int
    COMMAND_FIELD_NUMBER: int
    ID: str
    HostUUID: str
    """CrackstationID"""
    CreatedAt: int
    StartedAt: int
    CompletedAt: int
    Err: str
    @property
    def Command(self) -> CrackCommand: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        HostUUID: str = ...,
        CreatedAt: int = ...,
        StartedAt: int = ...,
        CompletedAt: int = ...,
        Err: str = ...,
        Command: CrackCommand | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["Command", b"Command"]) -> bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["Command", b"Command", "CompletedAt", b"CompletedAt", "CreatedAt", b"CreatedAt", "Err", b"Err", "HostUUID", b"HostUUID", "ID", b"ID", "StartedAt", b"StartedAt"]) -> None: ...

@typing_extensions.final
class Crackstation(Message):
    DESCRIPTOR: Descriptor

    @typing_extensions.final
    class BenchmarksEntry(Message):
        DESCRIPTOR: Descriptor

        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: int
        value: int
        def __init__(
            self,
            *,
            key: int = ...,
            value: int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    OPERATORNAME_FIELD_NUMBER: int
    GOOS_FIELD_NUMBER: int
    GOARCH_FIELD_NUMBER: int
    HASHCATVERSION_FIELD_NUMBER: int
    HOSTUUID_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    BENCHMARKS_FIELD_NUMBER: int
    CUDA_FIELD_NUMBER: int
    METAL_FIELD_NUMBER: int
    OPENCL_FIELD_NUMBER: int
    ID: str
    Name: str
    OperatorName: str
    GOOS: str
    """The cracker's OS"""
    GOARCH: str
    """The cracker's Arch"""
    HashcatVersion: str
    HostUUID: str
    Version: str
    @property
    def Benchmarks(self) -> ScalarMap[int, int]: ...
    @property
    def CUDA(self) -> RepeatedCompositeFieldContainer[CUDABackendInfo]: ...
    @property
    def Metal(self) -> RepeatedCompositeFieldContainer[MetalBackendInfo]: ...
    @property
    def OpenCL(self) -> RepeatedCompositeFieldContainer[OpenCLBackendInfo]: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        Name: str = ...,
        OperatorName: str = ...,
        GOOS: str = ...,
        GOARCH: str = ...,
        HashcatVersion: str = ...,
        HostUUID: str = ...,
        Version: str = ...,
        Benchmarks: Mapping[int, int] | None = ...,
        CUDA: Iterable[CUDABackendInfo] | None = ...,
        Metal: Iterable[MetalBackendInfo] | None = ...,
        OpenCL: Iterable[OpenCLBackendInfo] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Benchmarks", b"Benchmarks", "CUDA", b"CUDA", "GOARCH", b"GOARCH", "GOOS", b"GOOS", "HashcatVersion", b"HashcatVersion", "HostUUID", b"HostUUID", "ID", b"ID", "Metal", b"Metal", "Name", b"Name", "OpenCL", b"OpenCL", "OperatorName", b"OperatorName", "Version", b"Version"]) -> None: ...

@typing_extensions.final
class CUDABackendInfo(Message):
    DESCRIPTOR: Descriptor

    TYPE_FIELD_NUMBER: int
    VENDORID_FIELD_NUMBER: int
    VENDOR_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    PROCESSORS_FIELD_NUMBER: int
    CLOCK_FIELD_NUMBER: int
    MEMORYTOTAL_FIELD_NUMBER: int
    MEMORYFREE_FIELD_NUMBER: int
    CUDAVERSION_FIELD_NUMBER: int
    Type: str
    VendorID: int
    Vendor: str
    Name: str
    Version: str
    Processors: int
    Clock: int
    MemoryTotal: str
    MemoryFree: str
    CUDAVersion: str
    def __init__(
        self,
        *,
        Type: str = ...,
        VendorID: int = ...,
        Vendor: str = ...,
        Name: str = ...,
        Version: str = ...,
        Processors: int = ...,
        Clock: int = ...,
        MemoryTotal: str = ...,
        MemoryFree: str = ...,
        CUDAVersion: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["CUDAVersion", b"CUDAVersion", "Clock", b"Clock", "MemoryFree", b"MemoryFree", "MemoryTotal", b"MemoryTotal", "Name", b"Name", "Processors", b"Processors", "Type", b"Type", "Vendor", b"Vendor", "VendorID", b"VendorID", "Version", b"Version"]) -> None: ...

@typing_extensions.final
class OpenCLBackendInfo(Message):
    DESCRIPTOR: Descriptor

    TYPE_FIELD_NUMBER: int
    VENDORID_FIELD_NUMBER: int
    VENDOR_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    PROCESSORS_FIELD_NUMBER: int
    CLOCK_FIELD_NUMBER: int
    MEMORYTOTAL_FIELD_NUMBER: int
    MEMORYFREE_FIELD_NUMBER: int
    OPENCLVERSION_FIELD_NUMBER: int
    OPENCLDRIVERVERSION_FIELD_NUMBER: int
    Type: str
    VendorID: int
    Vendor: str
    Name: str
    Version: str
    Processors: int
    Clock: int
    MemoryTotal: str
    MemoryFree: str
    OpenCLVersion: str
    OpenCLDriverVersion: str
    def __init__(
        self,
        *,
        Type: str = ...,
        VendorID: int = ...,
        Vendor: str = ...,
        Name: str = ...,
        Version: str = ...,
        Processors: int = ...,
        Clock: int = ...,
        MemoryTotal: str = ...,
        MemoryFree: str = ...,
        OpenCLVersion: str = ...,
        OpenCLDriverVersion: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Clock", b"Clock", "MemoryFree", b"MemoryFree", "MemoryTotal", b"MemoryTotal", "Name", b"Name", "OpenCLDriverVersion", b"OpenCLDriverVersion", "OpenCLVersion", b"OpenCLVersion", "Processors", b"Processors", "Type", b"Type", "Vendor", b"Vendor", "VendorID", b"VendorID", "Version", b"Version"]) -> None: ...

@typing_extensions.final
class MetalBackendInfo(Message):
    DESCRIPTOR: Descriptor

    TYPE_FIELD_NUMBER: int
    VENDORID_FIELD_NUMBER: int
    VENDOR_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    VERSION_FIELD_NUMBER: int
    PROCESSORS_FIELD_NUMBER: int
    CLOCK_FIELD_NUMBER: int
    MEMORYTOTAL_FIELD_NUMBER: int
    MEMORYFREE_FIELD_NUMBER: int
    METALVERSION_FIELD_NUMBER: int
    Type: str
    VendorID: int
    Vendor: str
    Name: str
    Version: str
    Processors: int
    Clock: int
    MemoryTotal: str
    MemoryFree: str
    MetalVersion: str
    def __init__(
        self,
        *,
        Type: str = ...,
        VendorID: int = ...,
        Vendor: str = ...,
        Name: str = ...,
        Version: str = ...,
        Processors: int = ...,
        Clock: int = ...,
        MemoryTotal: str = ...,
        MemoryFree: str = ...,
        MetalVersion: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["Clock", b"Clock", "MemoryFree", b"MemoryFree", "MemoryTotal", b"MemoryTotal", "MetalVersion", b"MetalVersion", "Name", b"Name", "Processors", b"Processors", "Type", b"Type", "Vendor", b"Vendor", "VendorID", b"VendorID", "Version", b"Version"]) -> None: ...

@typing_extensions.final
class CrackCommand(Message):
    DESCRIPTOR: Descriptor

    ATTACKMODE_FIELD_NUMBER: int
    HASHTYPE_FIELD_NUMBER: int
    HASHES_FIELD_NUMBER: int
    QUIET_FIELD_NUMBER: int
    HEXCHARSET_FIELD_NUMBER: int
    HEXSALT_FIELD_NUMBER: int
    HEXWORDLIST_FIELD_NUMBER: int
    FORCE_FIELD_NUMBER: int
    DEPRECATEDCHECKDISABLE_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    STATUSJSON_FIELD_NUMBER: int
    STATUSTIMER_FIELD_NUMBER: int
    STDINTIMEOUTABORT_FIELD_NUMBER: int
    MACHINEREADABLE_FIELD_NUMBER: int
    KEEPGUESSING_FIELD_NUMBER: int
    SELFTESTDISABLE_FIELD_NUMBER: int
    LOOPBACK_FIELD_NUMBER: int
    MARKOVHCSTAT2_FIELD_NUMBER: int
    MARKOVDISABLE_FIELD_NUMBER: int
    MARKOVCLASSIC_FIELD_NUMBER: int
    MARKOVINVERSE_FIELD_NUMBER: int
    MARKOVTHRESHOLD_FIELD_NUMBER: int
    RUNTIME_FIELD_NUMBER: int
    SESSION_FIELD_NUMBER: int
    RESTORE_FIELD_NUMBER: int
    RESTOREDISABLE_FIELD_NUMBER: int
    RESTOREFILE_FIELD_NUMBER: int
    OUTFILEFORMAT_FIELD_NUMBER: int
    OUTFILEAUTOHEXDISABLE_FIELD_NUMBER: int
    OUTFILECHECKTIMER_FIELD_NUMBER: int
    WORDLISTAUTOHEXDISABLE_FIELD_NUMBER: int
    SEPARATOR_FIELD_NUMBER: int
    STDOUT_FIELD_NUMBER: int
    SHOW_FIELD_NUMBER: int
    LEFT_FIELD_NUMBER: int
    USERNAME_FIELD_NUMBER: int
    REMOVE_FIELD_NUMBER: int
    REMOVETIMER_FIELD_NUMBER: int
    POTFILEDISABLE_FIELD_NUMBER: int
    POTFILE_FIELD_NUMBER: int
    ENCODINGFROM_FIELD_NUMBER: int
    ENCODINGTO_FIELD_NUMBER: int
    DEBUGMODE_FIELD_NUMBER: int
    LOGFILEDISABLE_FIELD_NUMBER: int
    HCCAPXMESSAGEPAIR_FIELD_NUMBER: int
    NONCEERRORCORRECTIONS_FIELD_NUMBER: int
    KEYBOARDLAYOUTMAPPING_FIELD_NUMBER: int
    BENCHMARK_FIELD_NUMBER: int
    BENCHMARKALL_FIELD_NUMBER: int
    SPEEDONLY_FIELD_NUMBER: int
    PROGRESSONLY_FIELD_NUMBER: int
    SEGMENTSIZE_FIELD_NUMBER: int
    BITMAPMIN_FIELD_NUMBER: int
    BITMAPMAX_FIELD_NUMBER: int
    CPUAFFINITY_FIELD_NUMBER: int
    HOOKTHREADS_FIELD_NUMBER: int
    HASHINFO_FIELD_NUMBER: int
    BACKENDIGNORECUDA_FIELD_NUMBER: int
    BACKENDIGNOREHIP_FIELD_NUMBER: int
    BACKENDIGNOREMETAL_FIELD_NUMBER: int
    BACKENDIGNOREOPENCL_FIELD_NUMBER: int
    BACKENDINFO_FIELD_NUMBER: int
    BACKENDDEVICES_FIELD_NUMBER: int
    OPENCLDEVICETYPES_FIELD_NUMBER: int
    OPTIMIZEDKERNELENABLE_FIELD_NUMBER: int
    MULTIPLYACCELDISABLED_FIELD_NUMBER: int
    WORKLOADPROFILE_FIELD_NUMBER: int
    KERNELACCEL_FIELD_NUMBER: int
    KERNELLOOPS_FIELD_NUMBER: int
    KERNELTHREADS_FIELD_NUMBER: int
    BACKENDVECTORWIDTH_FIELD_NUMBER: int
    SPINDAMP_FIELD_NUMBER: int
    HWMONDISABLE_FIELD_NUMBER: int
    HWMONTEMPABORT_FIELD_NUMBER: int
    SCRYPTTMTO_FIELD_NUMBER: int
    SKIP_FIELD_NUMBER: int
    LIMIT_FIELD_NUMBER: int
    KEYSPACE_FIELD_NUMBER: int
    RULESFILE_FIELD_NUMBER: int
    GENERATERULES_FIELD_NUMBER: int
    GENERATERULESFUNMIN_FIELD_NUMBER: int
    GENERATERULESFUNMAX_FIELD_NUMBER: int
    GENERATERULESFUNCSEL_FIELD_NUMBER: int
    GENERATERULESSEED_FIELD_NUMBER: int
    CUSTOMCHARSET1_FIELD_NUMBER: int
    CUSTOMCHARSET2_FIELD_NUMBER: int
    CUSTOMCHARSET3_FIELD_NUMBER: int
    CUSTOMCHARSET4_FIELD_NUMBER: int
    IDENTIFY_FIELD_NUMBER: int
    INCREMENT_FIELD_NUMBER: int
    INCREMENTMIN_FIELD_NUMBER: int
    INCREMENTMAX_FIELD_NUMBER: int
    SLOWCANDIDATES_FIELD_NUMBER: int
    BRAINSERVER_FIELD_NUMBER: int
    BRAINSERVERTIMER_FIELD_NUMBER: int
    BRAINCLIENT_FIELD_NUMBER: int
    BRAINCLIENTFEATURES_FIELD_NUMBER: int
    BRAINHOST_FIELD_NUMBER: int
    BRAINPORT_FIELD_NUMBER: int
    BRAINPASSWORD_FIELD_NUMBER: int
    BRAINSESSION_FIELD_NUMBER: int
    BRAINSESSIONWHITELIST_FIELD_NUMBER: int
    AttackMode: CrackAttackMode.ValueType
    HashType: HashType.ValueType
    @property
    def Hashes(self) -> RepeatedScalarFieldContainer[str]: ...
    Quiet: bool
    """--version
    --help
    """
    HexCharset: bool
    HexSalt: bool
    HexWordlist: bool
    Force: bool
    DeprecatedCheckDisable: bool
    Status: bool
    StatusJSON: bool
    StatusTimer: int
    StdinTimeoutAbort: int
    MachineReadable: bool
    KeepGuessing: bool
    SelfTestDisable: bool
    Loopback: bool
    MarkovHcstat2: bytes
    """--markov-hcstat2 FILE"""
    MarkovDisable: bool
    MarkovClassic: bool
    MarkovInverse: bool
    MarkovThreshold: int
    Runtime: int
    Session: str
    """[a-zA-Z0-9_-]"""
    Restore: bool
    RestoreDisable: bool
    RestoreFile: bytes
    """--restore-file-path FILE"""
    @property
    def OutfileFormat(self) -> RepeatedScalarFieldContainer[CrackOutfileFormat.ValueType]:
        """--outfile FILE (28)"""
    OutfileAutohexDisable: bool
    OutfileCheckTimer: int
    WordlistAutohexDisable: bool
    Separator: str
    """single char"""
    Stdout: bool
    Show: bool
    Left: bool
    Username: bool
    Remove: bool
    RemoveTimer: int
    PotfileDisable: bool
    Potfile: bytes
    """--potfile-path FILE"""
    EncodingFrom: CrackEncoding.ValueType
    EncodingTo: CrackEncoding.ValueType
    DebugMode: int
    LogfileDisable: bool
    """--debug-file FILE (45)
    --induction-dir DIR (46)
    --outfile-check-dir DIR (47)
    """
    HccapxMessagePair: int
    NonceErrorCorrections: int
    KeyboardLayoutMapping: bytes
    """--keyboard-layout-mapping FILE"""
    Benchmark: bool
    """--truecrypt-keyfiles FILE (52)
    --veracrypt-keyfiles FILE (53)
    --veracrypt-pim-start PIM (54)
    --veracrypt-pim-stop PIM (55)
    """
    BenchmarkAll: bool
    SpeedOnly: bool
    ProgressOnly: bool
    SegmentSize: int
    BitmapMin: int
    BitmapMax: int
    @property
    def CPUAffinity(self) -> RepeatedScalarFieldContainer[int]: ...
    HookThreads: int
    HashInfo: bool
    BackendIgnoreCUDA: bool
    """--example-hashes (66)"""
    BackendIgnoreHip: bool
    BackendIgnoreMetal: bool
    BackendIgnoreOpenCL: bool
    BackendInfo: bool
    @property
    def BackendDevices(self) -> RepeatedScalarFieldContainer[int]: ...
    @property
    def OpenCLDeviceTypes(self) -> RepeatedScalarFieldContainer[int]: ...
    OptimizedKernelEnable: bool
    MultiplyAccelDisabled: bool
    WorkloadProfile: CrackWorkloadProfile.ValueType
    KernelAccel: int
    KernelLoops: int
    KernelThreads: int
    BackendVectorWidth: int
    SpinDamp: int
    HwmonDisable: bool
    HwmonTempAbort: int
    ScryptTMTO: int
    Skip: int
    Limit: int
    Keyspace: bool
    RulesFile: bytes
    """--rule-left (88)
    --rule-right (89)
    --rules-file FILE
    """
    GenerateRules: int
    GenerateRulesFunMin: int
    GenerateRulesFunMax: int
    GenerateRulesFuncSel: str
    GenerateRulesSeed: int
    CustomCharset1: str
    CustomCharset2: str
    CustomCharset3: str
    CustomCharset4: str
    Identify: str
    Increment: bool
    IncrementMin: int
    IncrementMax: int
    SlowCandidates: bool
    BrainServer: bool
    BrainServerTimer: int
    BrainClient: bool
    BrainClientFeatures: str
    BrainHost: str
    BrainPort: int
    BrainPassword: str
    BrainSession: str
    BrainSessionWhitelist: str
    def __init__(
        self,
        *,
        AttackMode: CrackAttackMode.ValueType = ...,
        HashType: HashType.ValueType = ...,
        Hashes: Iterable[str] | None = ...,
        Quiet: bool = ...,
        HexCharset: bool = ...,
        HexSalt: bool = ...,
        HexWordlist: bool = ...,
        Force: bool = ...,
        DeprecatedCheckDisable: bool = ...,
        Status: bool = ...,
        StatusJSON: bool = ...,
        StatusTimer: int = ...,
        StdinTimeoutAbort: int = ...,
        MachineReadable: bool = ...,
        KeepGuessing: bool = ...,
        SelfTestDisable: bool = ...,
        Loopback: bool = ...,
        MarkovHcstat2: bytes = ...,
        MarkovDisable: bool = ...,
        MarkovClassic: bool = ...,
        MarkovInverse: bool = ...,
        MarkovThreshold: int = ...,
        Runtime: int = ...,
        Session: str = ...,
        Restore: bool = ...,
        RestoreDisable: bool = ...,
        RestoreFile: bytes = ...,
        OutfileFormat: Iterable[CrackOutfileFormat.ValueType] | None = ...,
        OutfileAutohexDisable: bool = ...,
        OutfileCheckTimer: int = ...,
        WordlistAutohexDisable: bool = ...,
        Separator: str = ...,
        Stdout: bool = ...,
        Show: bool = ...,
        Left: bool = ...,
        Username: bool = ...,
        Remove: bool = ...,
        RemoveTimer: int = ...,
        PotfileDisable: bool = ...,
        Potfile: bytes = ...,
        EncodingFrom: CrackEncoding.ValueType = ...,
        EncodingTo: CrackEncoding.ValueType = ...,
        DebugMode: int = ...,
        LogfileDisable: bool = ...,
        HccapxMessagePair: int = ...,
        NonceErrorCorrections: int = ...,
        KeyboardLayoutMapping: bytes = ...,
        Benchmark: bool = ...,
        BenchmarkAll: bool = ...,
        SpeedOnly: bool = ...,
        ProgressOnly: bool = ...,
        SegmentSize: int = ...,
        BitmapMin: int = ...,
        BitmapMax: int = ...,
        CPUAffinity: Iterable[int] | None = ...,
        HookThreads: int = ...,
        HashInfo: bool = ...,
        BackendIgnoreCUDA: bool = ...,
        BackendIgnoreHip: bool = ...,
        BackendIgnoreMetal: bool = ...,
        BackendIgnoreOpenCL: bool = ...,
        BackendInfo: bool = ...,
        BackendDevices: Iterable[int] | None = ...,
        OpenCLDeviceTypes: Iterable[int] | None = ...,
        OptimizedKernelEnable: bool = ...,
        MultiplyAccelDisabled: bool = ...,
        WorkloadProfile: CrackWorkloadProfile.ValueType = ...,
        KernelAccel: int = ...,
        KernelLoops: int = ...,
        KernelThreads: int = ...,
        BackendVectorWidth: int = ...,
        SpinDamp: int = ...,
        HwmonDisable: bool = ...,
        HwmonTempAbort: int = ...,
        ScryptTMTO: int = ...,
        Skip: int = ...,
        Limit: int = ...,
        Keyspace: bool = ...,
        RulesFile: bytes = ...,
        GenerateRules: int = ...,
        GenerateRulesFunMin: int = ...,
        GenerateRulesFunMax: int = ...,
        GenerateRulesFuncSel: str = ...,
        GenerateRulesSeed: int = ...,
        CustomCharset1: str = ...,
        CustomCharset2: str = ...,
        CustomCharset3: str = ...,
        CustomCharset4: str = ...,
        Identify: str = ...,
        Increment: bool = ...,
        IncrementMin: int = ...,
        IncrementMax: int = ...,
        SlowCandidates: bool = ...,
        BrainServer: bool = ...,
        BrainServerTimer: int = ...,
        BrainClient: bool = ...,
        BrainClientFeatures: str = ...,
        BrainHost: str = ...,
        BrainPort: int = ...,
        BrainPassword: str = ...,
        BrainSession: str = ...,
        BrainSessionWhitelist: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["AttackMode", b"AttackMode", "BackendDevices", b"BackendDevices", "BackendIgnoreCUDA", b"BackendIgnoreCUDA", "BackendIgnoreHip", b"BackendIgnoreHip", "BackendIgnoreMetal", b"BackendIgnoreMetal", "BackendIgnoreOpenCL", b"BackendIgnoreOpenCL", "BackendInfo", b"BackendInfo", "BackendVectorWidth", b"BackendVectorWidth", "Benchmark", b"Benchmark", "BenchmarkAll", b"BenchmarkAll", "BitmapMax", b"BitmapMax", "BitmapMin", b"BitmapMin", "BrainClient", b"BrainClient", "BrainClientFeatures", b"BrainClientFeatures", "BrainHost", b"BrainHost", "BrainPassword", b"BrainPassword", "BrainPort", b"BrainPort", "BrainServer", b"BrainServer", "BrainServerTimer", b"BrainServerTimer", "BrainSession", b"BrainSession", "BrainSessionWhitelist", b"BrainSessionWhitelist", "CPUAffinity", b"CPUAffinity", "CustomCharset1", b"CustomCharset1", "CustomCharset2", b"CustomCharset2", "CustomCharset3", b"CustomCharset3", "CustomCharset4", b"CustomCharset4", "DebugMode", b"DebugMode", "DeprecatedCheckDisable", b"DeprecatedCheckDisable", "EncodingFrom", b"EncodingFrom", "EncodingTo", b"EncodingTo", "Force", b"Force", "GenerateRules", b"GenerateRules", "GenerateRulesFunMax", b"GenerateRulesFunMax", "GenerateRulesFunMin", b"GenerateRulesFunMin", "GenerateRulesFuncSel", b"GenerateRulesFuncSel", "GenerateRulesSeed", b"GenerateRulesSeed", "HashInfo", b"HashInfo", "HashType", b"HashType", "Hashes", b"Hashes", "HccapxMessagePair", b"HccapxMessagePair", "HexCharset", b"HexCharset", "HexSalt", b"HexSalt", "HexWordlist", b"HexWordlist", "HookThreads", b"HookThreads", "HwmonDisable", b"HwmonDisable", "HwmonTempAbort", b"HwmonTempAbort", "Identify", b"Identify", "Increment", b"Increment", "IncrementMax", b"IncrementMax", "IncrementMin", b"IncrementMin", "KeepGuessing", b"KeepGuessing", "KernelAccel", b"KernelAccel", "KernelLoops", b"KernelLoops", "KernelThreads", b"KernelThreads", "KeyboardLayoutMapping", b"KeyboardLayoutMapping", "Keyspace", b"Keyspace", "Left", b"Left", "Limit", b"Limit", "LogfileDisable", b"LogfileDisable", "Loopback", b"Loopback", "MachineReadable", b"MachineReadable", "MarkovClassic", b"MarkovClassic", "MarkovDisable", b"MarkovDisable", "MarkovHcstat2", b"MarkovHcstat2", "MarkovInverse", b"MarkovInverse", "MarkovThreshold", b"MarkovThreshold", "MultiplyAccelDisabled", b"MultiplyAccelDisabled", "NonceErrorCorrections", b"NonceErrorCorrections", "OpenCLDeviceTypes", b"OpenCLDeviceTypes", "OptimizedKernelEnable", b"OptimizedKernelEnable", "OutfileAutohexDisable", b"OutfileAutohexDisable", "OutfileCheckTimer", b"OutfileCheckTimer", "OutfileFormat", b"OutfileFormat", "Potfile", b"Potfile", "PotfileDisable", b"PotfileDisable", "ProgressOnly", b"ProgressOnly", "Quiet", b"Quiet", "Remove", b"Remove", "RemoveTimer", b"RemoveTimer", "Restore", b"Restore", "RestoreDisable", b"RestoreDisable", "RestoreFile", b"RestoreFile", "RulesFile", b"RulesFile", "Runtime", b"Runtime", "ScryptTMTO", b"ScryptTMTO", "SegmentSize", b"SegmentSize", "SelfTestDisable", b"SelfTestDisable", "Separator", b"Separator", "Session", b"Session", "Show", b"Show", "Skip", b"Skip", "SlowCandidates", b"SlowCandidates", "SpeedOnly", b"SpeedOnly", "SpinDamp", b"SpinDamp", "Status", b"Status", "StatusJSON", b"StatusJSON", "StatusTimer", b"StatusTimer", "StdinTimeoutAbort", b"StdinTimeoutAbort", "Stdout", b"Stdout", "Username", b"Username", "WordlistAutohexDisable", b"WordlistAutohexDisable", "WorkloadProfile", b"WorkloadProfile"]) -> None: ...

@typing_extensions.final
class CrackConfig(Message):
    DESCRIPTOR: Descriptor

    AUTOFIRE_FIELD_NUMBER: int
    MAXFILESIZE_FIELD_NUMBER: int
    CHUNKSIZE_FIELD_NUMBER: int
    MAXDISKUSAGE_FIELD_NUMBER: int
    AutoFire: bool
    MaxFileSize: int
    ChunkSize: int
    MaxDiskUsage: int
    def __init__(
        self,
        *,
        AutoFire: bool = ...,
        MaxFileSize: int = ...,
        ChunkSize: int = ...,
        MaxDiskUsage: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["AutoFire", b"AutoFire", "ChunkSize", b"ChunkSize", "MaxDiskUsage", b"MaxDiskUsage", "MaxFileSize", b"MaxFileSize"]) -> None: ...

@typing_extensions.final
class CrackFiles(Message):
    DESCRIPTOR: Descriptor

    FILES_FIELD_NUMBER: int
    CURRENTDISKUSAGE_FIELD_NUMBER: int
    MAXDISKUSAGE_FIELD_NUMBER: int
    @property
    def Files(self) -> RepeatedCompositeFieldContainer[CrackFile]: ...
    CurrentDiskUsage: int
    MaxDiskUsage: int
    def __init__(
        self,
        *,
        Files: Iterable[CrackFile] | None = ...,
        CurrentDiskUsage: int = ...,
        MaxDiskUsage: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["CurrentDiskUsage", b"CurrentDiskUsage", "Files", b"Files", "MaxDiskUsage", b"MaxDiskUsage"]) -> None: ...

@typing_extensions.final
class CrackFile(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    CREATEDAT_FIELD_NUMBER: int
    LASTMODIFIED_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    UNCOMPRESSEDSIZE_FIELD_NUMBER: int
    SHA2_256_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    ISCOMPRESSED_FIELD_NUMBER: int
    MAXFILESIZE_FIELD_NUMBER: int
    CHUNKSIZE_FIELD_NUMBER: int
    CHUNKS_FIELD_NUMBER: int
    ID: str
    CreatedAt: int
    LastModified: int
    Name: str
    UncompressedSize: int
    Sha2_256: str
    Type: CrackFileType.ValueType
    IsCompressed: bool
    MaxFileSize: int
    ChunkSize: int
    @property
    def Chunks(self) -> RepeatedCompositeFieldContainer[CrackFileChunk]: ...
    def __init__(
        self,
        *,
        ID: str = ...,
        CreatedAt: int = ...,
        LastModified: int = ...,
        Name: str = ...,
        UncompressedSize: int = ...,
        Sha2_256: str = ...,
        Type: CrackFileType.ValueType = ...,
        IsCompressed: bool = ...,
        MaxFileSize: int = ...,
        ChunkSize: int = ...,
        Chunks: Iterable[CrackFileChunk] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ChunkSize", b"ChunkSize", "Chunks", b"Chunks", "CreatedAt", b"CreatedAt", "ID", b"ID", "IsCompressed", b"IsCompressed", "LastModified", b"LastModified", "MaxFileSize", b"MaxFileSize", "Name", b"Name", "Sha2_256", b"Sha2_256", "Type", b"Type", "UncompressedSize", b"UncompressedSize"]) -> None: ...

@typing_extensions.final
class CrackFileChunk(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    CRACKFILEID_FIELD_NUMBER: int
    N_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    ID: str
    CrackFileID: str
    N: int
    Data: bytes
    def __init__(
        self,
        *,
        ID: str = ...,
        CrackFileID: str = ...,
        N: int = ...,
        Data: bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["CrackFileID", b"CrackFileID", "Data", b"Data", "ID", b"ID", "N", b"N"]) -> None: ...

@typing_extensions.final
class MonitoringProviders(Message):
    """watchtower"""

    DESCRIPTOR: Descriptor

    PROVIDERS_FIELD_NUMBER: int
    @property
    def providers(self) -> RepeatedCompositeFieldContainer[MonitoringProvider]: ...
    def __init__(
        self,
        *,
        providers: Iterable[MonitoringProvider] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["providers", b"providers"]) -> None: ...

@typing_extensions.final
class MonitoringProvider(Message):
    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    APIKEY_FIELD_NUMBER: int
    APIPASSWORD_FIELD_NUMBER: int
    ID: str
    Type: str
    APIKey: str
    APIPassword: str
    def __init__(
        self,
        *,
        ID: str = ...,
        Type: str = ...,
        APIKey: str = ...,
        APIPassword: str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["APIKey", b"APIKey", "APIPassword", b"APIPassword", "ID", b"ID", "Type", b"Type"]) -> None: ...

@typing_extensions.final
class ResourceID(Message):
    """resource IDs"""

    DESCRIPTOR: Descriptor

    ID_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    VALUE_FIELD_NUMBER: int
    ID: str
    Type: str
    Name: str
    Value: int
    def __init__(
        self,
        *,
        ID: str = ...,
        Type: str = ...,
        Name: str = ...,
        Value: int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ID", b"ID", "Name", b"Name", "Type", b"Type", "Value", b"Value"]) -> None: ...
